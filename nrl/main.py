from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InputFile, Message, ContentType
from messages.profile import message_text
from markup.start_markup import start_markup
from database.insert_user import User_insert
from json_data.rule import RuleReader
from json_data.operator import Operator
from json_data.chanel import Chanel
from messages.pay import pay_txt
from markup.pay_markup import pay_markup
from markup.card import card_markup
from messages.card_pay_text import card_pay_text
from markup.crypto import crypto_markup
from messages.crypto_pay_text import crypto_pay_text
from scripts.download_order import PhotoDownloader
from json_data.sity import SityReader
from json_data.stocks import StocksReader
from database.uptade_balance import Balance
from logs.add_element import Add_to
from logs.get_elements import Get_sp
from logs.add_to_data import Add_user

def check_int(n):
    try:
        f = int(n)
        return True
    except:
        return False

API_TOKEN = '6797564906:AAHlTmkQT15l7scH7O1FpyYbdSa6DSilByA'


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
payok = dict()
user_shop = dict()
user_stocks = dict()
payy = dict()
balance1 = dict()
buy = dict()
user_buy = dict()

buttons = ["üë§–ü—Ä–æ—Ñ–∏–ª—å", "üìã–ü—Ä–∞–≤–∏–ª–∞", "üë®‚Äçüíª–û–ø–µ—Ä–∞—Ç–æ—Ä", "‚úÖ–û—Ç–∑—ã–≤—ã", "üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "üí≥–ö–∞—Ä—Ç–∞", "üíé–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "üõí–ó–∞–∫–∞–∑–∞—Ç—å", "üè°–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]


@dp.message_handler(commands=['start']) #–Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ, –Ω–∞ –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ä–µ–∞–≥–∏—Ä—É–µ–º.
async def send_welcome(message: types.Message):
    
    User_insert.create(message.chat.id)
    Add_user.add_user(message.chat.id)
    photo = InputFile("pics/first_pic.jpg")

    await message.answer_photo(caption=""""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AK-47 SHOP!
 
  –ü–ª–∞—Ç–∏–º –Ω–∞—à–∏–º –∫—É—Ä—å–µ—Ä–∞–º –ø–æ 2000 –†/–≥ 

üöÄ –†–∞–±–æ—Ç–∞–π —Å –Ω–∞–º–∏ –Ω–∞ —Ç–æ–ø–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö! üöÄ
–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤–Ω–µ—Å–µ–Ω–∏–µ ,–≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ª–æ–≥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∫—É—Ä—å–µ—Ä–æ–º, –í–∞—à —Ç–æ–≤–∞—Ä.

–ú—ã –¥–µ–ª–∞–µ–º —É–ø–æ—Ä –Ω–∞ —Å–≤–µ–∂–µ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤! –ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∞–¥–æ–≤ –≤–æ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–∞—Ö –ê–±—Ö–∞–∑–∏–∏! –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫—É—Ä—å–µ—Ä–æ–≤ –∏ –±–æ–ª—å—à–æ–π —Å–ø—Ä–æ—Å –Ω–µ –¥–∞–µ—Ç —Å—Ç–æ—è—Ç—å –ø—É—Å—Ç—ã–º –≤–∏—Ç—Ä–∏–Ω–∞–º –∏ –ø–æ–¥–æ–ª–≥—É –ª–µ–∂–∞—Ç—å –∫–ª–∞–¥–∞–º –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö!
–¢—Ä–µ–±—É—é—Ç—Å—è –∫—É—Ä—å–µ—Ä—ã –≤ –≥–æ—Ä–æ–¥–∞:
–°–£–•–£–úüî•üî•üî•
–ì–ê–ì–†–êüî•üî•üî•
–ì–ê–î–ê–£–¢–ê
–ü–ò–¶–£–ù–î–ê
–û–ß–ê–ú–ß–ò–†–ê
–ù–û–í–´–ô –ê–§–û–ù""", photo=photo, reply_markup=start_markup)



@dp.message_handler() #–°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
async def echo(message: types.Message): #–°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–µ–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
   if message.chat.type == 'private':
        if message.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å':
           await message.answer(message_text(message.chat.id))
        elif message.text == 'üìã–ü—Ä–∞–≤–∏–ª–∞':
           await message.answer(RuleReader.get_rule())

        elif message.text == 'üë®‚Äçüíª–û–ø–µ—Ä–∞—Ç–æ—Ä':
            await message.answer(Operator.get_operator())

        elif message.text == '‚úÖ–û—Ç–∑—ã–≤—ã':
            await message.answer(Chanel.get_chanel())

        elif message.text == 'üíµ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
            await message.answer(pay_txt(), reply_markup=pay_markup)

        elif message.text == 'üí≥–ö–∞—Ä—Ç–∞':
            await message.answer(card_pay_text(), reply_markup=card_markup)

        elif message.text == 'üíé–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞':
            await message.answer(crypto_pay_text(), reply_markup=card_markup)

        elif message.text == 'üõí–ó–∞–∫–∞–∑–∞—Ç—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            f = SityReader.get_sity()
            for i in f:
                markup.add(f.get(i))

            markup.add("üè°–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥", reply_markup=markup)

            user_shop[message.chat.id] = True


        if message.text == 'üè°–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
            photo = InputFile("pics/first_pic.jpf")

            await message.answer_photo(caption="kello", photo=photo, reply_markup=start_markup)


        elif message.text not in buttons and user_shop.get(message.chat.id):
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            f = StocksReader.get_stocks(message.text)
            spis = Get_sp.get_elements(id=message.chat.id)
            for i in f:
                if i in spis:
                    pass
                else:
                    markup.add(types.KeyboardButton(i))


            buy[message.chat.id] = {
                "sity": message.text,
                "socks": "None"
            }
            markup.add("üè°–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä", reply_markup=markup)
            user_shop[message.chat.id] = False
            user_stocks[message.chat.id] = True

        

        elif message.text not in buttons and user_stocks.get(message.chat.id) and message.text != 'üè°–í–µ—Ä–Ω—É—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' and not(check_int(message.text)):
            

            sp = buy.get(message.chat.id)

            sp["socks"] = message.text

            buy[message.chat.id] = sp


            await message.answer("‚ö°Ô∏è‚ö°Ô∏è‚ö°Ô∏è", reply_markup=start_markup)

            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("‚úÖ–û–ø–ª–∞—Ç–∏—Ç—å", callback_data='pay_shop'))
            markup.add(types.InlineKeyboardButton("üè°–í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é", callback_data='back'))
            await message.answer("–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞ –≤—ã –±–µ—Ä–µ—Ç–µ –≤—Å—é –æ—Ç–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Å–µ–±—è –∏ –≤—Å–µ —Ç–∞–∫–æ–µ —Ö–∑ —á–µ —Ç—É—Ç –ø–∏—Å–∞—Ç—å", reply_markup=markup)


        elif message.text not in buttons and payy.get(message.chat.id).get('ms'):
            m_d = payy[message.chat.id]
            m_d["ms"] = False
            payy[message.chat.id] = m_d
            balance1[message.chat.id] = int(message.text)
            markup = types.InlineKeyboardMarkup(row_width=2)
            markup.add(types.InlineKeyboardButton("–ó–∞—á–∏—Å–ª–∏—Ç—å", callback_data="yes"))
            markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", callback_data="change"))
            await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∏—Å–ª–∏—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.text} RUB", reply_markup=markup)


      



@dp.callback_query_handler()
async def check_button(call: types.CallbackQuery):

    if call.data == 'unpayd':
        photo = InputFile("pics/first_pic.png")
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await call.message.answer_photo(caption="kello", photo=photo, reply_markup=start_markup)
        payok[call.message.chat.id] = False

    elif call.data == 'crypto_payd':
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ –±–æ—Ç–∞, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à —á–µ–∫ –∏ –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å")
        payok[call.message.chat.id] = True

    elif call.data == 'card_payd':
        await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ –±–æ—Ç–∞, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à —á–µ–∫ –∏ –¥–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å")
        payok[call.message.chat.id] = True


    elif call.data == 'pay_shop':
        ss = buy.get(call.message.chat.id)
        if ss != None:
            if Balance.get_balance(call.message.chat.id) >= int(ss.get("socks").split(":")[2]):
                await call.message.delete()
                await call.message.answer("–ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∑–∞ –¥–∞–ª—å—à–µ–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–π –ø—Ä–æ—Å–∏–º –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—à–∏–Ω—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º—ã", reply_markup=start_markup)








                Add_to.add_element(id=call.message.chat.id, element=ss.get("socks"))

                user = Balance(call.message.chat.id)

                user.add_to_balance(-1 * int(ss.get("socks").split(":")[2]))



            else:
                await call.message.delete()
                await call.message.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–∞—è‚ùå, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Ç—Å–≤.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å")
                await call.message.answer(pay_txt(), reply_markup=pay_markup)
            




    elif "unpay_" in call.data:
        await call.message.delete()
        await call.message.answer("–ü—Ä–∏–Ω—è—Ç–æ")
        id_user = call.data.replace("unpay_", "")
        
        await bot.send_message(chat_id=id_user, text="–∏–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∞ –≤–∞—à —á–µ–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª–π—Å—Ç–∞ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")


    elif "pay_" in call.data:
        id_user = call.data.replace("pay_", "")
        await call.message.delete()
        await call.message.answer("–≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ RUB")
        payy[call.message.chat.id] = {
            "ms": True,
            "id": id_user
        }

    

    

    elif call.data == 'change':
        await call.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
        m_d = payy[call.message.chat.id]
        m_d["ms"] = True
        payy[call.message.chat.id] = m_d

    elif call.data == 'yes':
        print(balance1.get(call.message.chat.id))
        await call.message.edit_text("–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å")
        user = Balance(payy.get(call.message.chat.id).get("id"))
        user.add_to_balance(balance1.get(call.message.chat.id))
        await bot.send_message(chat_id=payy.get(call.message.chat.id).get("id"), text=f"–ù–∞ –≤–∞—à —Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ {balance1.get(call.message.chat.id)}")

    



        
@dp.message_handler(content_types=ContentType.PHOTO)
async def handle_photo(message: Message):
    if payok.get(message.chat.id):
        photo_id = message.photo[-1].file_id
        await PhotoDownloader.download_photo(file_path=await bot.download_file_by_id(photo_id), id=message.chat.id)
        await message.answer("–í–∞—à —á–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", reply_markup=start_markup)
        payok[message.chat.id] = False

        for i in [6921452909]:
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.add(types.InlineKeyboardButton("–û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"pay_{message.chat.id}"))
            markup.add(types.InlineKeyboardButton("–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", callback_data=f"unpay_{message.chat.id}"))
            await bot.send_photo(caption="–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", photo=InputFile(f"orders/{message.chat.id}.jpg"), chat_id=i, reply_markup=markup)

        

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

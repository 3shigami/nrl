# -*- coding: utf-8 -*-
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import Throttled
from aiogram.types import CallbackQuery, ContentType
from PIL import Image, ImageDraw, ImageFont
import config
import menu
from requests import get
import sqlite3
from statess import *
import random 
import aiohttp
import functions
import asyncio
import json
import math
from filters import IsAdminFilter
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.handler import CancelHandler, current_handler
import logging, configparser
from aiogram.utils.exceptions import BotBlocked
from aiogram.dispatcher import filters
import datetime
import db
from db import Database
import time
from datetime import timedelta ,datetime , date
from aiogram.types import ChatType
from json_invite.rule_reader import get
from markups.accept_rule import accept_markup
from markups.invite import invite_markup
from scripts.check_button import Invite_Button
from stats.stats import Stats
from markups.service import Markup_service
from scripts.srvice_button import Service_button_click
from markups.hours_markup import hours
from markups.send_mail import send
from scripts.msg import Msg
from scripts.get_id import Get_ID
from menu import checkss, from_what_bot, tp_check, prozvon, skrin, check_adm
from scripts.curators import Cura
from scripts.Data import Curator
config_name = "config.ini"

bot = Bot(config.API_Worker, parse_mode='HTML', disable_web_page_preview=True) 
arbitrbot = Bot(config.API_Arbitrage, parse_mode='HTML') 
casinobot = Bot(config.API_Casino, parse_mode='HTML') 
tradebot = Bot(config.API_Trade, parse_mode='HTML') 
dp = Dispatcher(bot,storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)
bd = 'data/database.db'

reported_users = {}
GROUP_ID = 6921452909
REPORT_ID = 6921452909
REPORT_TIME = 15 * 60
inv = dict()
set_work = dict()
ussss = dict()



class Check_seen(StatesGroup):
    service = State()
    service1 = State()
    tp = State()
    prozvon = State()
    skr = State()


class Curators_state(StatesGroup):
    id = State()






print('–í–æ—Ä–∫–µ—Ä –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω [+]')

class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=0.5, key_prefix="antiflood_"):
        self.rate_limit = limit
        self.prefix = key_prefix
        super(ThrottlingMiddleware, self).__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        handler = current_handler.get()
        dispatcher = Dispatcher.get_current()
        if handler:
            limit = getattr(handler, "throttling_rate_limit", self.rate_limit)
            key = getattr(handler, "throttling_key", f"{self.prefix}_{handler.__name__}")
        else:
            limit = self.rate_limit
            key = f"{self.prefix}_message"
        try:
            await dispatcher.throttle(key, rate=limit)
        except Throttled as t:
            await self.message_throttled(message, t)
            raise CancelHandler()

    async def message_throttled(self, message: types.Message, throttled: Throttled):
        handler = current_handler.get()
        dispatcher = Dispatcher.get_current()
        if handler:
            key = getattr(handler, "throttling_key", f"{self.prefix}_{handler.__name__}")
        else:
            key = f"{self.prefix}_message"
        delta = throttled.rate - throttled.delta
        if throttled.exceeded_count <= 2:
            await message.reply("<b>‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ.</b>")
        await asyncio.sleep(delta)
        thr = await dispatcher.check_key(key)

def get_config(value):
	config = configparser.ConfigParser()
	config.read(config_name)
	r = config['Settings'][value]
	return r

async def config_set_value(value, value_set):
	config = configparser.ConfigParser()
	config.read(config_name)
	config.set('Settings', value, value_set)

	with open(config_name, 'w') as configfile:
		config.write(configfile)

def rate_limit(limit: int, key=None):
    def decorator(func):
        setattr(func, "throttling_rate_limit", limit)
        if key:
            setattr(func, "throttling_key", key)
        return func
    return decorator

dp.filters_factory.bind(IsAdminFilter)

async def started(dp):
	await bot.send_message(config.ADMIN, text='‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

@dp.message_handler(commands="start", state="*")
@rate_limit(2, 'start')
async def cmd_start(message: types.Message, state: FSMContext):
    #try:
        await functions.update_data(message)
        if message.chat.type == 'private':
            with sqlite3.connect(bd) as c:
                check = c.execute("SELECT id FROM workers WHERE id = ?", (message.from_user.id,)).fetchone()
            if check is None:
                await message.answer("""–ü—Ä–∞–≤–∏–ª–∞ ‚ö†Ô∏è

‚ùóÔ∏è –ú—É—Ç –≤—ã–¥–∞–µ—Ç—Å—è –∑–∞:
1.1 –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ
1.2 –ß—Ä–µ–∑–º–µ—Ä–Ω–æ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –º–µ—à–∞—é—â–µ–µ –æ–±—â–µ–Ω–∏—é, —Ä–∞–∑–∂–∏–≥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
1.3 –°–ø–∞–º –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ–ª–µ–µ 5 —Ä–∞–∑ - –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 12 —á–∞—Å–æ–≤

‚ùóÔ∏è –í–∞—Ä–Ω/–±–∞–Ω (–±–∞–Ω = 5 –≤–∞—Ä–Ω–æ–≤) –≤—ã–¥–∞–µ—Ç—Å—è –∑–∞:
2.1 –î–µ–∑–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö
2.2 –†–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π)
2.3 –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏, –∞ —Ç–∞–∫–∂–µ –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è –ø–æ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∏–ª–∏ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É

‚ùóÔ∏è –ë–∞–Ω –≤—ã–¥–∞–µ—Ç—Å—è –∑–∞:
3.1 –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –ø—Ä–∏—ë–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π
3.2 –†–µ–∫–ª–∞–º–∞, —Å—Å—ã–ª–∫–∏, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏–µ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã
3.3 –õ—é–±—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–¥–∞—Ç—å —Å–µ–±—è –∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞""", reply_markup=menu.prinsogl, parse_mode='HTML')
            else:
                price = await convert_to_dollars()
                with sqlite3.connect(bd) as c:
                    result = c.execute(f"SELECT warn_count FROM workers WHERE id = {message.from_user.id}").fetchone()[0]
                    info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
                    print(info)
                    get_s_profits = c.execute(f'SELECT * FROM profits WHERE user_id = {message.from_user.id}').fetchall()
                    refs = c.execute(f'SELECT * FROM workers WHERE ref = {message.from_user.id}').fetchall()
                    l_profits = len(get_s_profits)
                    s_profits = 0
                    now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                    diff = datetime.strptime(
                    now, "%d.%m.%Y %H:%M:%S"
                    ) - datetime.strptime(info[15], "%d.%m.%Y %H:%M:%S")
                    for i in get_s_profits:
                        s_profits += i[1]
                    try:
                        average_profit = s_profits / l_profits
                    except:
                        average_profit = 0


                    text_main = f"""üë§ –•–∞—Å–ª–µ—Ä: @{message.from_user.username}
üí† ID: {message.chat.id}
üîé FAKE —Ç–µ–≥: [<code>{info[3]}</code>]

ü•á–í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã 
‚î£ üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
‚îó üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>

"""

                    text2 = f'''üë®‚Äçüíª –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
   ‚îî [<code>{message.from_user.id}</code>]

üîê –†–µ—Ñ –∫–æ–¥ –¥–ª—è –±–æ—Ç–æ–≤: [<code>{info[3]}</code>]

üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìé –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{len(refs)} –≤–æ—Ä–∫–µ—Ä–æ–≤</b>

‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>[{result}/3]</b>
üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>

                –£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä!'
                        '''.format(result, price)
                    text3 = f'''üë®‚Äçüíª –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
   ‚îî [<code>{message.from_user.id}</code>]

üîê –†–µ—Ñ –∫–æ–¥ –¥–ª—è –±–æ—Ç–æ–≤: [<code>{info[3]}</code>]

üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìé –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{len(refs)} –≤–æ—Ä–∫–µ—Ä–æ–≤</b>

‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>[{result}/3]</b>
üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>

                –£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä!'
                        '''.format(result, price)
                    text4 = f'''üë®‚Äçüíª –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
   ‚îî [<code>{message.from_user.id}</code>]

üîê –†–µ—Ñ –∫–æ–¥ –¥–ª—è –±–æ—Ç–æ–≤: [<code>{info[3]}</code>]

üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìé –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{len(refs)} –≤–æ—Ä–∫–µ—Ä–æ–≤</b>

‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>[{result}/3]</b>
üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>'
                        '''.format(result, price)
                    if message.from_user.id == int(config.ADMIN):
                            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
                            await message.answer(text2, reply_markup=menu.adm, parse_mode='HTML')
                    elif info[5] == 1:
                            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
                            await message.answer(text3, reply_markup=menu.moder, parse_mode='HTML')
                    elif info[9] == 1:
                            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
                            await message.answer(text4, reply_markup=menu.kur, parse_mode='HTML')
                    elif info[13] == 1:
                            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
                            await message.answer(text2, reply_markup=menu.ts2, parse_mode='HTML')
                    elif info[10] == 1:
                        pass
                    elif info[16] == 1:
                        await message.answer(f"‚ö°", reply_markup=menu.mainkb)
                        await message.answer(text=text_main, reply_markup=menu.ban_report, parse_mode='HTML')
                    else:
                        await message.answer(f"‚ö°", reply_markup=menu.mainkb)
                        await message.answer(text=text_main, reply_markup=menu.prof, parse_mode='HTML')
    #except:
    #    await bot.send_message(-1001625778192, f'{message.from_user.id} {message.from_user.username} {message.text}')






@dp.callback_query_handler(menu.user_info_callback.filter(status='1'))
async def accept_form(call: CallbackQuery, callback_data: dict):
    us_id = Get_ID.id(call.message.text)
    await call.bot.edit_message_text(call.message.text + f"\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ {callback_data.get('username')}", call.message.chat.id,call.message.message_id)
    await call.bot.send_message(us_id, 'ü•≥', reply_markup=menu.mainkb)
    await call.bot.send_message(us_id, '<b>ONEX üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∞</b>\n\n–í—Å—Ç—É–ø–∞–π—Ç–µ –≤ —á–∞—Ç –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å!\n<b>–£–¥–∞—á–Ω—ã—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤!</b>' ,reply_markup=menu.links, parse_mode='HTML')
    
    with sqlite3.connect(bd) as c:
        c.execute('INSERT INTO workers VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)',(us_id, callback_data.get('username'), random.randint(79023457654, 79869999999), random.randint(000000, 999999),'0', '0', '1000', random.randint(5536910000000000, 5536919999999999), '0', '0', '0', '0', '0', '0',callback_data.get('ref'),datetime.now().strftime("%d.%m.%Y %H:%M:%S"), '0', 0))
        c.execute('UPDATE stat SET workers = workers + ? WHERE nice = ?',('1', '777',))

@dp.callback_query_handler(menu.user_info_callback.filter(status='0'))
async def decline_form(call: CallbackQuery, callback_data: dict):
    await call.bot.edit_message_text(call.message.text + f"\n\nüö´ –ó–∞—è–≤–∫–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ {callback_data.get('username')}", call.message.chat.id,call.message.message_id)
    await call.bot.send_message(callback_data.get("user_id"), "<b>ONEX üõë –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>", parse_mode='HTML')

@dp.message_handler(commands=['warn'], is_chat_admin=True)
async def warn_user(message: types.Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        username = message.reply_to_message.from_user.username
        userfirst = message.reply_to_message.from_user.first_name
        conn = sqlite3.connect(bd)
        with conn:
            cur = conn.cursor()
            cur.execute("SELECT warn_count FROM workers WHERE id = ?", (user_id, ))
            result = cur.fetchone()
            if not result:
                cur.execute("INSERT INTO workers(id, warn_count) VALUES(?, ?)", (user_id, 1)) 
            else: 
                cur.execute("UPDATE workers SET warn_count=? WHERE id=?", (int(result[0]) + 1, user_id))
                conn.commit()
                warn_count = int(result[0]) + 1
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href="http://t.me/{username}">{userfirst}</a> –Ω–∞—á–∏—Å–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.</b>\n<b>–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> [{warn_count}/3].', parse_mode='HTML')
                if warn_count >= 3:
                    await bot.kick_chat_member(message.chat.id, user_id)
                    await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href="http://t.me/{username}">{userfirst}</a> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –±–æ–ª—å—à–æ–µ –∫–æ–ª-–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.</b>', parse_mode='HTML')
    else:
        await message.reply("<b>–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –≤–∞—Ä–Ω.</b>", parse_mode='HTML')
        return

@dp.message_handler(commands=['unwarn'], is_chat_admin=True)
async def warn_user(message: types.Message):
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        username = message.reply_to_message.from_user.username
        userfirst = message.reply_to_message.from_user.first_name
        conn = sqlite3.connect(bd)
        with conn:
            cur = conn.cursor()
            cur.execute("SELECT warn_count FROM workers WHERE id = ?", (user_id, ))
            result = cur.fetchone()
            if not result:
                cur.execute("INSERT INTO workers(id, warn_count) VALUES(?, ?)", (user_id, 0))
            else: 
                cur.execute("UPDATE workers SET warn_count=? WHERE id=?", (int(result[0]) - 1, user_id))
                conn.commit()
                warn_count = int(result[0]) - 1
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <a href="http://t.me/{username}">{userfirst}</a> –±—ã–ª–æ —Å–Ω—è—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.</b>\n<b>–í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:</b> [{warn_count}/3].', parse_mode='HTML')
    else:
        await message.reply("<b>–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –≤–∞—Ä–Ω.</b>", parse_mode='HTML')
        return

@dp.message_handler(commands=['ban'], commands_prefix='/', is_chat_admin=True)
async def ban(message: types.Message):
   if not message.reply_to_message:
      await message.reply("<b>–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.</b>", parse_mode='HTML')
      return
   comment = " ".join(message.text.split()[1:])
   await bot.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False))
   await bot.send_sticker(GROUP_ID, sticker=r"CAACAgIAAxkBAAEHg7tj17WIFPQUM8q_QC-9Q-CzNy3rzQACDQ0AApZNYEnHAn6qLi8ZBS0E")
   await message.reply(f'<a href="http://t.me/{message.from_user.username}">{message.from_user.first_name}</a> <b>–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª <a href="http://t.me/{message.reply_to_message.from_user.username}">{message.reply_to_message.from_user.first_name}</a></b>\n\n<b>‚ùóÔ∏è–ü—Ä–∏—á–∏–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å): {comment}</b>', parse_mode='HTML')

@dp.message_handler(commands=['unban'], commands_prefix='/', is_chat_admin=True)
async def unban(message: types.Message):
   if not message.reply_to_message:
      await message.reply("<b>–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ –∫–æ–≥–æ —Ö–æ—á–µ—à—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å.</b>", parse_mode='HTML')
      return
   await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
   await message.reply(f'<a href="http://t.me/{message.from_user.username}">{message.from_user.first_name}</a> <b>—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª: <a href="http://t.me/{message.reply_to_message.from_user.username}">{message.reply_to_message.from_user.first_name}</a></b>', parse_mode='HTML')

@dp.message_handler(filters.IDFilter(user_id=config.ADMIN), commands=['stats'])
async def stats(message: types.Message):
    await bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=menu.admin_change())

@dp.message_handler(commands=['mute'], commands_prefix='/', is_chat_admin=True)
async def mute(message: types.Message):
      name1 = message.from_user.get_mention(as_html=True)
      if not message.reply_to_message:
         await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>", parse_mode='HTML')
         return
      try:
         muteint = int(message.text.split()[1])
         mutetype = message.text.split()[2]
         comment = " ".join(message.text.split()[3:])
      except IndexError:
         await message.reply('<b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤‚ùóÔ∏è</b>\n<b>–ü—Ä–∏–º–µ—Ä:</b>\n\n<code>/mute 1 —á –ø—Ä–∏—á–∏–Ω–∞</code>', parse_mode='HTML')
         return
      if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å":
         dt = datetime.now() + timedelta(hours=muteint)
         timestamp = dt.timestamp()
         await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = timestamp)
         await message.reply(f'<a href="http://t.me/{message.from_user.username}">{message.from_user.first_name}</a> <b>–∑–∞–º—É—Ç–∏–ª: <a href="http://t.me/{message.reply_to_message.from_user.username}">{message.reply_to_message.from_user.first_name}</a></b>\n\n<b>–°—Ä–æ–∫: {muteint} {mutetype}</b>\n<b>–ü—Ä–∏—á–∏–Ω–∞: {comment}</b>', parse_mode='HTML')
      elif mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç—ã":
         dt = datetime.now() + timedelta(minutes=muteint)
         timestamp = dt.timestamp()
         await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = timestamp)
         await message.reply(f'<a href="http://t.me/{message.from_user.username}">{message.from_user.first_name}</a> <b>–∑–∞–º—É—Ç–∏–ª: <a href="http://t.me/{message.reply_to_message.from_user.username}">{message.reply_to_message.from_user.first_name}</a></b>\n\n<b>–°—Ä–æ–∫: {muteint} {mutetype}</b>\n<b>–ü—Ä–∏—á–∏–Ω–∞: {comment}</b>', parse_mode='HTML')
      elif mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å":
         dt = datetime.now() + timedelta(days=muteint)
         timestamp = dt.timestamp()
         await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date = timestamp)
         await message.reply(f'<a href="http://t.me/{message.from_user.username}">{message.from_user.first_name}</a> <b>–∑–∞–º—É—Ç–∏–ª: <a href="http://t.me/{message.reply_to_message.from_user.username}">{message.reply_to_message.from_user.first_name}</a></b>\n\n<b>–°—Ä–æ–∫: {muteint} {mutetype}</b>\n<b>(by ONEX)–ü—Ä–∏—á–∏–Ω–∞: {comment}</b>', parse_mode='HTML')

@dp.message_handler(commands=['unmute'], commands_prefix='/', is_chat_admin=True)
async def unmute(message: types.Message):
   if not message.reply_to_message:
      await message.reply("<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>", parse_mode='HTML')
      return
   await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
   await message.reply(f'<a href="http://t.me/{message.from_user.username}">{message.from_user.first_name}</a> <b>—Ä–∞–∑–º—É—Ç–∏–ª <a href="http://t.me/{message.reply_to_message.from_user.username}">{message.reply_to_message.from_user.first_name}</a></b>', parse_mode='HTML')

@dp.callback_query_handler(text_startswith="admin", state="*")
async def admin_panel(call: types.CallbackQuery, state: FSMContext):
	variant = call.data.split(":")[1]
	if variant == "change":
		data = call.data.split(":")[2]
		if data == "status_work" or data == "status_kaz" or data == "status_tr" or data == "status_arb":
			await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è {data}', reply_markup=menu.set_value(data))
		elif data == "status_kur":
			with sqlite3.connect(bd) as c:
				info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
			if info[9] == 1:
				await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è {data}', reply_markup=menu.set_value(data))
			else:
				pass
		elif data == "status_moder":
			with sqlite3.connect(bd) as c:
				info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
			if info[5] == 1:
				await call.message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è {data}', reply_markup=menu.set_value(data))
			else:
				pass
		elif data == "limit_link":
			await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É')
			await Waits.q1.set()
		
	elif variant == "set":
		data = call.data.split(":")[2]
		value = call.data.split(":")[3]
		if data == "1":
			await config_set_value(value,"1")
		else:
			await config_set_value(value,"0")
		await call.message.edit_text('‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')
		
	elif variant == "set":
		data = call.data.split(":")[2]
		value = call.data.split(":")[3]
		if data == "1":
			await config_set_value(value,"1")
		else:
			await config_set_value(value,"0")
		await call.message.edit_text('‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!')

@dp.message_handler(content_types=['text'], text='–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê')
async def buy(message: types.Message):
    if message.chat.type == 'private':
        with sqlite3.connect(bd) as c:
            info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
            if info[10] == 0:
                await message.answer(f'''<b>üåê –ê—Ä–±–∏—Ç—Ä–∞–∂</b>

üìã –í–∞—à —Ä–µ—Ñ –∫–æ–¥: [<code>{info[3]}</code>]
ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã: @Teating_robot

üí≥ –í–∞—à –Ω–æ–º–µ—Ä:
üá∑üá∫ <code>{info[2]}</code>
üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞:
üá∑üá∫ <code>{info[7]}</code>

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
<code>https://t.me/Teating_robot?start={info[3]}</code>''', reply_markup=menu.arbitrmenu(info[6]))
            else:
                pass
    else:
        pass

@dp.message_handler(content_types=['text'], text='–ö–∞–∑–∏–Ω–æ üé∞')
async def buy(message: types.Message):
    if message.chat.type == 'private':
        with sqlite3.connect(bd) as c:
            info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
            if info[10] == 0:
                await message.answer(f'''<b>–ö–∞–∑–∏–Ω–æ üé∞</b>

üìã –í–∞—à —Ä–µ—Ñ –∫–æ–¥: [<code>{info[3]}</code>]
ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã: @Kazikdemo_robot

üí≥ –í–∞—à –Ω–æ–º–µ—Ä:
üá∑üá∫ <code>{info[2]}</code>
üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞:
üá∑üá∫ <code>{info[7]}</code>

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
<code>https://t.me/Kazikdemo_robot?start={info[3]}</code>''', reply_markup=menu.arbitrmenu(info[6]))
            else:
                pass
    else:
        pass


@dp.message_handler(content_types=['text'], text='–ù–§–¢ üç¨')
async def buy(message: types.Message):
    if message.chat.type == 'private':
        with sqlite3.connect(bd) as c:
            info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
            if info[10] == 0:
                await message.answer(f'''<b>–ù–§–¢ üç¨</b>

üìã –í–∞—à —Ä–µ—Ñ –∫–æ–¥: [<b>{message.from_user.id}</b>]
ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã: @Gdfgfdgfzdffddd_robot
‚öôÔ∏è –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±–æ—Ç–µ –Ω—Ñ—Ç [/work]

üîó –í–∞—à–∞ —Ä–µ—Ñ —Å—Å—ã–ª–∫–∞:
<code>t.me/Gdfgfdgfzdffddd_robot?start={message.from_user.id}</code>

‚õîÔ∏è –í–ù–ò–ú–ê–ù–ò–ï, –í–°–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –ú–ê–ú–û–ù–¢–ê–• –ë–£–î–£–¢ –ü–†–ò–•–û–î–ò–¢–¨ –í –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ –ù–§–¢!''')
            else:
                pass
    else:
        pass

@dp.message_handler(content_types=['text'], text='ü§ñ –ë–æ—Ç—ã')
async def buy(message: types.Message):
    if message.chat.type == 'private':
        with sqlite3.connect(bd) as c:
            info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
            if info[10] == 0:
                await message.answer(f'''ü§ñ''', reply_markup=menu.
mainbot)
            else:
                pass
    else:
        pass

@dp.message_handler(content_types=['text'], text='–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
async def buy(message: types.Message):
    if message.chat.type == 'private':
        with sqlite3.connect(bd) as c:
            info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
            if info[10] == 0:
                await message.answer(f'''üè†''', reply_markup=menu.mainkb)
            else:
                pass
    else:
        pass

@dp.message_handler(content_types=['text'], text='–¢—Ä–µ–π–¥–∏–Ω–≥ üìà')
async def buy(message: types.Message):
    if message.chat.type == 'private':
        with sqlite3.connect(bd) as c:
            info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
            if info[10] == 0:
                await message.answer(f'''<b>üìà –¢—Ä–µ–π–¥–∏–Ω–≥</b>

üìã –í–∞—à —Ä–µ—Ñ –∫–æ–¥: [<code>{info[3]}</code>]
ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã: @glavteamdemobot

üí≥ –í–∞—à –Ω–æ–º–µ—Ä:
üá∑üá∫ <code>{info[2]}</code>
üí≥ –í–∞—à–∞ –∫–∞—Ä—Ç–∞:
üá∑üá∫ <code>{info[7]}</code>

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
<code>https://t.me/glavteamdemobot?start={info[3]}</code>''', reply_markup=menu.trademenu(info[6]))
            else:
                pass
    else:
        pass

async def convert_to_dollars():
    async with aiohttp.ClientSession() as session:
        async with session.get('https://www.cbr-xml-daily.ru/daily_json.js') as resp:
            data = await resp.text()
            data = json.loads(data)
            exchange_rate = data['Valute']['USD']['Value']
            return exchange_rate

@dp.message_handler(content_types=['text'], text='üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def buy(message: types.Message):
    await functions.update_data(message)
    price = await convert_to_dollars()
    if message.chat.type == 'private':
        with sqlite3.connect(bd) as c:
            result = c.execute(f"SELECT warn_count FROM workers WHERE id = {message.from_user.id}").fetchone()[0]
            info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
            get_s_profits = c.execute(f'SELECT * FROM profits WHERE user_id = {message.from_user.id}').fetchall()
            refs = c.execute(f'SELECT * FROM workers WHERE ref = {message.from_user.id}').fetchall()
            l_profits = len(get_s_profits)
            s_profits = 0
            now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            diff = datetime.strptime(
                now, "%d.%m.%Y %H:%M:%S"
            ) - datetime.strptime(info[15], "%d.%m.%Y %H:%M:%S")
            for i in get_s_profits:
                 s_profits += i[1]
            try:
               
                average_profit = s_profits / l_profits
            except:
                average_profit = 0







            text_main = f"""üë§ –•–∞—Å–ª–µ—Ä: @{message.from_user.username}
üí† ID: {message.chat.id}
üîé FAKE —Ç–µ–≥: [<code>{info[3]}</code>]

ü•á–í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã 
‚î£ üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
‚îó üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>

"""
            

            text2 = f'''üë®‚Äçüíª –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
   ‚îî [<code>{message.from_user.id}</code>]

üîê –†–µ—Ñ –∫–æ–¥ –¥–ª—è –±–æ—Ç–æ–≤: [<code>{info[3]}</code>]

üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìé –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{len(refs)} –≤–æ—Ä–∫–µ—Ä–æ–≤</b>

‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>[{result}/3]</b>
üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>

                –£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä!'
                        '''.format(result, price)
            
            text3 = f'''üë®‚Äçüíª –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
   ‚îî [<code>{message.from_user.id}</code>]

üîê –†–µ—Ñ –∫–æ–¥ –¥–ª—è –±–æ—Ç–æ–≤: [<code>{info[3]}</code>]

üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìé –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{len(refs)} –≤–æ—Ä–∫–µ—Ä–æ–≤</b>

‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>[{result}/3]</b>
üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>

                –£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä!'
                        '''.format(result, price)
            text4 = f'''üë®‚Äçüíª –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
   ‚îî [<code>{message.from_user.id}</code>]

üîê –†–µ—Ñ –∫–æ–¥ –¥–ª—è –±–æ—Ç–æ–≤: [<code>{info[3]}</code>]

üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìé –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{len(refs)} –≤–æ—Ä–∫–µ—Ä–æ–≤</b>

‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: <b>[{result}/3]</b>
üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>

                –£–¥–∞—á–Ω–æ–≥–æ –≤–æ—Ä–∫–∞ –≤–æ—Ä–∫–µ—Ä!'
                        '''.format(result, price)
        if message.from_user.id == int(config.ADMIN):
            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
            await message.answer(text2, reply_markup=menu.adm, parse_mode='HTML')
        elif info[5] == 1:
            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
            await message.answer(text3, reply_markup=menu.moder, parse_mode='HTML')
        elif info[9] == 1:
            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
            await message.answer(text4, reply_markup=menu.kur, parse_mode='HTML')
        elif info[13] == 1:
            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
            await message.answer(text2, reply_markup=menu.ts2, parse_mode='HTML')
        elif info[10] == 1:
            pass
        elif info[16] == 1:
            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
            await message.answer(text=text_main, reply_markup=menu.ban_report, parse_mode='HTML')
        else:
            await message.answer(f"‚ö°", reply_markup=menu.mainkb)
            await message.answer(text=text_main, reply_markup=menu.prof, parse_mode='HTML')
    else:
        pass

@dp.message_handler(content_types=['text'], text='–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª')
async def buy(message: types.Message):
    with sqlite3.connect(bd) as c:
        infa = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
        info = c.execute('SELECT * FROM stat').fetchone()
        if infa[10] == 0:
            await message.answer(f'''<b>üíÅ‚Äç‚ôÄÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ BOMB TEAM</b>

üî• –ú—ã –æ—Ç–∫—Ä—ã–ª–∏—Å—å: <b>10.10.2023</b>
üí∏ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{info[3]}</b>
üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{info[4]} RUB</b>

<b>–í—ã–ø–ª–∞—Ç—ã</b> –ø—Ä–æ–µ–∫—Ç–∞:
–ó–∞–ª–µ—Ç - <b>80%</b>
–ó–∞–ª–µ—Ç —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏ - <b>70%</b>

<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ</b> —Å–µ—Ä–≤–∏—Å–æ–≤: 
{'üåï' if get_config("status_arb") == '1' else 'üåë'} –ê—Ä–±–∏—Ç—Ä–∞–∂
{'üåï' if get_config("status_tr") == '1' else 'üåë'} –¢—Ä–µ–π–¥–∏–Ω–≥
{'üåï' if get_config("status_kaz") == '1' else 'üåë'} –ö–∞–∑–∏–Ω–æ
{'üåï ' if get_config("status_work") == '1' else 'üåë '}–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {'<b>–í–æ—Ä–∫</b>' if get_config("status_work") == '1' else '<b>–í—Ä–µ–º–µ–Ω–Ω–æ</b> –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º, —Ç–µ—Ö. —Ä–∞–±–æ—Ç—ã!'}''', reply_markup=menu.project, parse_mode='HTML')
        else:
            pass























@dp.callback_query_handler(text_startswith="check_1") 
async def checs(call:types.CallbackQuery):
    await call.message.edit_text(text="‚ö°Ô∏è –í—ã–±–µ—Ä–µ—Ç–µ —Å–µ—Ä–≤–∏—Å", reply_markup=checkss)
    await Check_seen.service.set()







@dp.callback_query_handler(text_startswith="good_check") 
async def checs(call:types.CallbackQuery):
    await bot.send_message(chat_id=int(call.message.caption.split("\n")[-1]), text="–í–∞—à —á–µ–∫ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–µ—Ä–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ —á–µ–∫ –Ω–∞ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ –æ—Ç cryptobot, –∑–∞—Ä–∞–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—Å—è –≤ —ç—Ç–æ–º –±–æ—Ç–µ")

@dp.callback_query_handler(text_startswith="bad_check") 
async def checs(call:types.CallbackQuery):
    await bot.send_message(chat_id=int(call.message.caption.split("\n")[-1]), text="‚ùå –í–∞—à —á–µ–∫ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É ")




@dp.callback_query_handler(state=Check_seen.service)
async def service_check(call:types.CallbackQuery, state=FSMContext):
    if call.data in ["forward_tranzaction", "site_tranzaction", "bot_trazaction"]:
        async with state.proxy() as data:
            
            data['service'] = call.data
            if call.data != "forward_tranzaction":
                await call.message.edit_text("–í—ã–±—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ñ–∏—Ç", reply_markup=from_what_bot)
                await Check_seen.service1.set()
            else:
                await call.message.edit_text("üë§ –ë—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏—Ç —Å–¥–µ–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏?", reply_markup=tp_check)
                await Check_seen.tp.set()

            

    elif call.data == "nazad_checks":
        with sqlite3.connect(bd) as c:
            info = c.execute(f'SELECT * FROM workers WHERE id = {call.message.chat.id}').fetchone()
            get_s_profits = c.execute(f'SELECT * FROM profits WHERE user_id = {call.message.chat.id}').fetchall()
            l_profits = len(get_s_profits)
            s_profits = 0
            now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            diff = datetime.strptime(
                now, "%d.%m.%Y %H:%M:%S"
            ) - datetime.strptime(info[15], "%d.%m.%Y %H:%M:%S")
            for i in get_s_profits:
                 s_profits += i[1]
            try:
               
                average_profit = s_profits / l_profits
            except:
                average_profit = 0
        text_main = f"""üë§ –•–∞—Å–ª–µ—Ä: @{call.message.from_user.username}
üí† ID: {call.message.chat.id}
üîé FAKE —Ç–µ–≥: [<code>{info[3]}</code>]

ü•á–í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã 
‚î£ üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
‚îó üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>

"""     
        await call.message.delete()
        await call.message.answer(f"‚ö°", reply_markup=menu.mainkb)
        await call.message.answer(text=text_main, reply_markup=menu.prof, parse_mode='HTML')
        await state.finish()





@dp.callback_query_handler(state=Check_seen.service1)
async def service1_check(call:types.CallbackQuery, state=FSMContext):
    if call.data in ["treid_bot_check", "arb_bot_check", "nrl_bot_check", "esk_bot_check", "nft_bots_check"]:
        async with state.proxy() as data:
            
            data['service1'] = call.data
            await call.message.edit_text("üë§ –ë—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏—Ç —Å–¥–µ–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏?", reply_markup=tp_check)
            await Check_seen.tp.set()


    elif call.data == "back_tranzaction":
        await call.message.edit_text(text="‚ö°Ô∏è –í—ã–±–µ—Ä–µ—Ç–µ —Å–µ—Ä–≤–∏—Å", reply_markup=checkss)
        await Check_seen.service.set()



@dp.callback_query_handler(state=Check_seen.tp)
async def service111_check(call:types.CallbackQuery, state=FSMContext):

    if call.data in ["tp_1", "tp_0"]:
        async with state.proxy() as data:
            if call.data.split("_")[1] == "1":
                data['tp'] = "1"
                print("tp")
            else:
                data['tp'] = "0"

            await call.message.edit_text("üì± –ë—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏—Ç —Å–¥–µ–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–∑–≤–æ–Ω–∞?", reply_markup=prozvon)
            await Check_seen.prozvon.set()

    elif call.data == 'back_to_tranzaction':
        await call.message.edit_text("–í—ã–±—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª —Å–æ–≤–µ—Ä—à–µ–Ω –ø—Ä–æ—Ñ–∏—Ç", reply_markup=checkss)
        await Check_seen.service.set()



@dp.callback_query_handler(state=Check_seen.prozvon)
async def service1111_check(call:types.CallbackQuery, state=FSMContext):
    if call.data in ["prozvon_1", "prozvon_0"]:
        async with state.proxy() as data:
            if call.data.split("_")[1] == "1":
                data['prozvon'] = "1"
                print("prozvon")
            else:
                data['prozvon'] = "0"

            await call.message.edit_text("""üí∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ 

–í –ø–æ–¥–ø–∏—Å–∏ –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É –¥–æ–±–∞–≤—å—Ç–µ —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–∞ —á–µ–∫–µ 
(–ë–µ–∑ —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–∏)

‚ùóÔ∏è –ù–∞ —á–µ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã:
1. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª —Å–¥–µ–ª–∞–Ω –ø–ª–∞—Ç–µ–∂.
2. –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –±—ã–ª —Å–¥–µ–ª–∞–Ω –ø–ª–∞—Ç–µ–∂.
3. –í—Ä–µ–º—è –∏ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.""", reply_markup=skrin)
            await Check_seen.skr.set()

    elif call.data == 'back_to_tp':
        await call.message.edit_text("üë§ –ë—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ—Ñ–∏—Ç —Å–¥–µ–ª–∞–Ω —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∏?", reply_markup=tp_check)
        await Check_seen.tp.set()












@dp.message_handler(state=Check_seen.skr, content_types=ContentType.PHOTO)
async def process_photo(message: types.Message, state: FSMContext):
    print(12)
    try:
        photo = message.photo
        await message.answer("–í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ ‚úÖ")
        async with state.proxy() as data:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM workers WHERE id = {message.chat.id}').fetchone()
            msg = f"""‚è± –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —á–µ–∫
‚îè –•–∞—Å–ª–µ—Ä_tg: @{message.from_user.username}
‚î£ –•–∞—Å–ª–µ—Ä_FAKE: [<code>{info[3]}</code>]\n"""
            if data["service"] == "forward_tranzaction":
                msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥\n"
                msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"

            elif data["service"] == "site_tranzaction":
                if data["service1"] == "treid_bot_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: üåê –°–∞–π—Ç—ã (üìä –¢—Ä–µ–π–¥)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"

                elif data["service1"] == "arb_bot_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: üåê –°–∞–π—Ç—ã (üìà –ê—Ä–±–∏—Ç—Ä–∞–∂)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"
                elif data["service1"] == "nrl_bot_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: üåê –°–∞–π—Ç—ã (üíä –ù–∞—Ä–∫–æ)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"

                elif data["service1"] == "esk_bot_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: üåê –°–∞–π—Ç—ã (üíã –≠—Å–∫–æ—Ä—Ç)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"
                elif data["service1"] == "nft_bots_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: üåê –°–∞–π—Ç—ã (üéÜ NFT)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"

            elif data["service"] == "bot_trazaction":
                if data["service1"] == "treid_bot_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ü§ñ –ë–æ—Ç—ã (üìä –¢—Ä–µ–π–¥)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"

                elif data["service1"] == "arb_bot_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ü§ñ –ë–æ—Ç—ã (üìà –ê—Ä–±–∏—Ç—Ä–∞–∂)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"
                elif data["service1"] == "nrl_bot_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ü§ñ –ë–æ—Ç—ã (üíä –ù–∞—Ä–∫–æ)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"

                elif data["service1"] == "esk_bot_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ü§ñ –ë–æ—Ç—ã (üíã –≠—Å–∫–æ—Ä—Ç)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"
                elif data["service1"] == "nft_bots_check":
                    msg += f"‚î£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ü§ñ –ë–æ—Ç—ã (üéÜ NFT)\n"
                    msg += f"‚îó –°—É–º–º–∞: {message.caption}‚ÇΩ\n"

                
            if data["tp"] == "0":
                msg += "–ë–µ–∑ –ø–æ–º–æ—â—å—é –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∏\n"

            else:
                msg += "–° –ø–æ–º–æ—â—å—é –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∏\n"

            if data["prozvon"] == "0":
                msg += "–ë–µ–∑ –ø–æ–º–æ—â–∏ –ü—Ä–æ–∑–≤–æ–Ω–∞\n"

            else:
                msg += "–° –ø–æ–º–æ—â—å—é –ü—Ä–æ–∑–≤–æ–Ω–∞\n"
            await state.finish()
            
            msg += f"{message.chat.id}\n"

            await bot.send_photo(chat_id=REPORT_ID, caption=msg, parse_mode="html", photo=photo[-1].file_id, reply_markup=check_adm)
    except:
        message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ")










@dp.callback_query_handler(text_startswith="curators") 
async def ref(call:types.CallbackQuery):

    await call.message.edit_text("–í–µ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –∫—É—Ä–∞—Ç–æ—Ä–∞", reply_markup=Cura.generate_curators_markup())
    await Curators_state.id.set()

@dp.callback_query_handler(text_startswith="apply") 
async def ref(call:types.CallbackQuery):
    conn = sqlite3.connect("data/database.db")
    cursor = conn.cursor()
    id = int(call.data.split("_")[1])
    cursor.execute("UPDATE workers SET students = ? WHERE id = ?", (id,))
    conn.commit()
    conn.close()
    coonection = sqlite3.connect("data/curators.db")
    curator = Curator(connection=coonection)
    id = curator.get_curator(id=int(call.data.split("_")[1]))[3]
    await bot.send_message(call.message.chat.id, text=f"@{id} –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∑–∞—è–≤–∫—É ‚úÖ")

@dp.callback_query_handler(state=Curators_state.id)
async def service1111_check(call:types.CallbackQuery, state=FSMContext):
    if call.data == "back_profile":
        with sqlite3.connect(bd) as c:
            info = c.execute(f'SELECT * FROM workers WHERE id = {call.message.chat.id}').fetchone()
            get_s_profits = c.execute(f'SELECT * FROM profits WHERE user_id = {call.message.chat.id}').fetchall()
            l_profits = len(get_s_profits)
            s_profits = 0
            now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            diff = datetime.strptime(
                now, "%d.%m.%Y %H:%M:%S"
            ) - datetime.strptime(info[15], "%d.%m.%Y %H:%M:%S")
            for i in get_s_profits:
                 s_profits += i[1]
            try:
               
                average_profit = s_profits / l_profits
            except:
                average_profit = 0
        text_main = f"""üë§ –•–∞—Å–ª–µ—Ä: @{call.message.from_user.username}
üí† ID: {call.message.chat.id}
üîé FAKE —Ç–µ–≥: [<code>{info[3]}</code>]

ü•á–í–∞—à–∏ –ø—Ä–æ—Ñ–∏—Ç—ã 
‚î£ üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É <b>{info[4]} RUB</b>
‚îó üí∏ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –ø—Ä–æ—Ñ–∏—Ç–æ–≤: <b>{average_profit} RUB</b>

üìÜ –í –∫–æ–º–∞–Ω–¥–µ: <b>{diff.days} –¥–µ–Ω—å</b>

"""     
        await call.message.delete()
        await call.message.answer(f"‚ö°", reply_markup=menu.mainkb)
        await call.message.answer(text=text_main, reply_markup=menu.prof, parse_mode='HTML')
        await state.finish()

    else:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"apply_{call.data}"))
        
        
        coonection = sqlite3.connect("data/curators.db")
        curator = Curator(connection=coonection)
        cura_m = curator.get_curator(id=call.data)
        print(cura_m)
        msg = f"""üë®‚Äçüíª–ù–∞—Å—Ç–∞–≤–Ω–∏–∫ {cura_m[4]}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 
‚î£ –ü–æ–º–æ–≥ —Ö–∞—Å–ª–µ—Ä—É –Ω–∞ —Å—É–º–º—É {cura_m[5]} RUB
‚îó –° –µ–≥–æ –ø–æ–º–æ—â—å—é –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ {cura_m[6]} –ø—Ä–æ—Ñ–∏—Ç–æ–≤
{cura_m[3]}"""
        markup.add(types.InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º", url=f"https://t.me/{cura_m[4]}"))
        markup.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ ", callback_data="back_to_cura"))
        await call.message.edit_text(msg, reply_markup=markup)
        await state.finish()
        
        

@dp.callback_query_handler(text_startswith="back_to_cura") 
async def back_cura(call:types.CallbackQuery):
    await call.message.edit_text("–í–µ–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å –∫—É—Ä–∞—Ç–æ—Ä–∞", reply_markup=Cura.generate_curators_markup())
    await Curators_state.id.set()








@dp.callback_query_handler(text_startswith="refkii_sekc") 
async def ref(call:types.CallbackQuery):

    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[10] == 0:
        me = await bot.get_me()
        await call.message.answer(f'''
<b>üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>

<i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</i>
–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–ª –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º:

1. –ü—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã, –æ–Ω –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑–∞—Ç—å –≤ –ø—É–Ω–∫—Ç–µ ¬´–û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?¬ª –≤–∞—à Telegram ID - <b>{call.from_user.id}</b>.
2. –û–Ω –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ - <code>https://t.me/{me['username']}?start={call.from_user.id}</code>

<b>–í —Å–ª—É—á–∞–µ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥—É, –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–∞—à–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º.</b>
    ''', parse_mode='HTML')
    else:
        pass

@dp.callback_query_handler(text_startswith="minimumpay") 
async def check_pay(call:types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,'–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –º–∞–º–æ–Ω—Ç–∞', reply_markup=menu.minnpay)
    
@dp.callback_query_handler(text_startswith="mp") 
async def check_pay(call:types.CallbackQuery):
    set = call.data.split(",")[1]
    with sqlite3.connect(bd) as c:
        c.execute('UPDATE workers SET minpay = ? WHERE id = ?',(set, call.from_user.id,))
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,f'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{set}</b>')

@dp.callback_query_handler(text_startswith="mamonts") 
async def check_pay(call:types.CallbackQuery):
    type = call.data.split(",")[1]
    if type == 'arbitr':
        try:
            with sqlite3.connect(bd) as c:
                ref = c.execute('SELECT * FROM workers WHERE id = ?',(call.from_user.id,)).fetchone()
                info = c.execute('SELECT * FROM mamonts_trade WHERE referal = ?',(ref[3],)).fetchall()
            repeat = math.ceil(len(info) / 50)
            count = 0
            max = 50
            while repeat != 0:
                await arbitrmamonts(call,info,count,max)
                count += 50
                max += 50
                repeat -=1
        except:
            await call.message.answer('<b>–£ –í–∞—Å –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤ :(</b>')
    elif type == 'casino':
        try:
            with sqlite3.connect(bd) as c:
                ref = c.execute('SELECT * FROM workers WHERE id = ?',(call.from_user.id,)).fetchone()
                info = c.execute('SELECT * FROM mamonts_trade WHERE referal = ?',(ref[3],)).fetchall()
            repeat = math.ceil(len(info) / 50)
            count = 0
            max = 50
            while repeat != 0:
                await casinomamonts(call,info,count,max)
                count += 50
                max += 50
                repeat -=1
        except:
            await call.message.answer('<b>–£ –í–∞—Å –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤ :(</b>')
    else:
        try:
            with sqlite3.connect(bd) as c:
                ref = c.execute('SELECT * FROM workers WHERE id = ?',(call.from_user.id,)).fetchone()
                info = c.execute('SELECT * FROM mamonts_trade WHERE referal = ?',(ref[3],)).fetchall()
            repeat = math.ceil(len(info) / 50)
            count = 0
            max = 50
            while repeat != 0:
                await trademamonts(call,info,count,max)
                count += 50
                max += 50
                repeat -=1
        except:
            await call.message.answer('<b>–£ –í–∞—Å –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤ :(</b>')

async def arbitrmamonts(call,info,count,max):
	step = info[count:max]
	mess = ""
	for x in step:
		mess += f'(/a{x[0]}) - {x[6]} @{x[7]} - <b>{x[3]} Rub</b>, <b>–£–¥–∞—á–∞</b> - {x[5]}%\n'
	await call.message.answer(mess)

async def casinomamonts(call,info,count,max):
	step = info[count:max]
	mess = ""
	for x in step:
		mess += f'(/c{x[0]}) - {x[6]} @{x[7]} - <b>{x[3]} Rub</b>, <b>–£–¥–∞—á–∞</b> - {x[5]}%\n'
	await call.message.answer(mess)

async def trademamonts(call,info,count,max):
	step = info[count:max]
	mess = ""
	for x in step:
		mess += f'(/t{x[0]}) - {x[6]} @{x[7]} - <b>{x[3]} Rub</b>, <b>–£–¥–∞—á–∞</b> - {x[5]}%\n'
	await call.message.answer(mess)

@dp.message_handler(lambda x: x.text.startswith("/a") and x.text[2:].isdigit()) 
async def buy(message: types.Message):
    with sqlite3.connect(bd) as c:
        info = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(message.text.split("/a")[-1],)).fetchone()
    try:
        await message.answer(f'''ü§ç –ú–∞–º–æ–Ω—Ç —Å ID [{info[0]}]
–ò–º—è: {info[6]}

–ë–∞–ª–∞–Ω—Å: {info[3]} ‚ÇΩ
–£–¥–∞—á–∞: {info[5]} %
–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {'üîí –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if info[4] == 1 else 'üîì –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'} ''', reply_markup=menu.mamontarbitrmenu(message.text.split("/a")[-1]))
    except:
        await message.answer(f'<b>–ü–æ—Ö–æ–¥—É –º–∞–º–æ–Ω—Ç —Å ID: {message.text.split("/a")[-1]} –Ω–µ –≤–∞—à...</b>')

@dp.message_handler(lambda x: x.text.startswith("/c") and x.text[2:].isdigit()) 
async def buy(message: types.Message):
    with sqlite3.connect(bd) as c:
        info = c.execute('SELECT * FROM mamonts_casino WHERE id = ?',(message.text.split("/c")[-1],)).fetchone()
    try:
        await message.answer(f'''ü§ç –ú–∞–º–æ–Ω—Ç —Å ID [{info[0]}]
–ò–º—è: {info[6]}

–ë–∞–ª–∞–Ω—Å: {info[3]} ‚ÇΩ
–£–¥–∞—á–∞: {info[5]} %
–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {'üîí –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if info[4] == 1 else 'üîì –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'} ''', reply_markup=menu.mamontarbitrmenu(message.text.split("/c")[-1]))
    except:
        await message.answer(f'<b>–ü–æ—Ö–æ–¥—É –º–∞–º–æ–Ω—Ç —Å ID: {message.text.split("/c")[-1]} –Ω–µ –≤–∞—à...</b>')

@dp.message_handler(lambda x: x.text.startswith("/t") and x.text[2:].isdigit()) 
async def buy(message: types.Message):
    with sqlite3.connect(bd) as c:
        info = c.execute('SELECT * FROM mamonts_trade WHERE id = ?',(message.text.split("/t")[-1],)).fetchone()
    try:
        await message.answer(f'''<b>ü¶£ –ú–∞–º–æ–Ω—Ç —Å ID</b> [<code>{info[0]}</code>]
–ò–º—è: <b>{info[6]}</b>

–ë–∞–ª–∞–Ω—Å: <b>{info[3]} RUB</b>
–£–¥–∞—á–∞: <b>{info[5]} %</b>
–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: {'<b>üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>' if info[4] == 1 else '<b>üîì –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>'}
–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'<b>‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</b>' if info[8] == 1 else '<b>üõë –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</b>'}
–°—Ç–∞—Ç—É—Å —Å—Ç–∞–≤–æ–∫: {'<b>üìä –ú–∞–º–æ–Ω—Ç –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å</b>' if info[10] == 0 else '<b>üìä –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Å—Ç–∞–≤–∫–∏ –º–∞–º–æ–Ω—Ç—É</b>'}
–°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞: {'<b>üí∏ –ú–∞–º–æ–Ω—Ç –º–æ–∂–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å</b>' if info[11] == 0 else '<b>üí∏ –ú–∞–º–æ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏</b>'} ''', parse_mode='HTML', reply_markup=menu.jmontarbitrmenu1(message.text.split("/t")[-1]))
    except:
        await message.answer(f'<b>–ü–æ—Ö–æ–¥—É –º–∞–º–æ–Ω—Ç —Å ID: {message.text.split("/t")[-1]} –Ω–µ –≤–∞—à...</b>')

@dp.callback_query_handler(text_startswith="Luck") 
async def check_pay(call:types.CallbackQuery,state:FSMContext):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,f'<b>–ö–∞–∫—É—é —É–¥–∞—á—É –ø–æ—Å—Ç–∞–≤–∏—Ç—å?</b>', reply_markup=menu.Luck(id,type))

@dp.callback_query_handler(text_startswith="StavkaLuckyman") 
async def check_pay(call:types.CallbackQuery,state:FSMContext):
    id,shans,type = call.data.split(",")[1],call.data.split(",")[2],call.data.split(",")[3]
    if type == 'arbitrage':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET shans = ? WHERE id = ?',(shans, id,))
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,f'<b>–£—Å–ø–µ—à–Ω–æ!</b>')
    elif type == 'casino':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_casino SET shans = ? WHERE id = ?',(shans, id,))
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,f'<b>–£—Å–ø–µ—à–Ω–æ!</b>')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET shans = ? WHERE id = ?',(shans, id,))
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,f'<b>–£—Å–ø–µ—à–Ω–æ!</b>')

@dp.callback_query_handler(text_startswith="BlockingUserID")
async def setchatlinkk(call: types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'arbitrage':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET block = ? WHERE id = ?',('1', id,))
        await bot.send_message(call.from_user.id, f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id}</b> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        await arbitrbot.send_message(id, f'<b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>')
    elif type == 'casino':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_casino SET block = ? WHERE id = ?',('1', id,))
        await bot.send_message(call.from_user.id, f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id}</b> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        await casinobot.send_message(id, f'<b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET block = ? WHERE id = ?',('1', id,))
        await bot.send_message(call.from_user.id, f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id}</b> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        await tradebot.send_message(id, f'<b>–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>')

@dp.callback_query_handler(text_startswith="UnBlockingUserID")
async def setchatlinkk(call: types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'arbitrage':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET block = ? WHERE id = ?',('0', id,))
        await bot.send_message(call.from_user.id, f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id}</b> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        await arbitrbot.send_message(id, f'<b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>')
    elif type == 'casino':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_casino SET block = ? WHERE id = ?',('0', id,))
        await bot.send_message(call.from_user.id, f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id}</b> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        await casinobot.send_message(id, f'<b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET block = ? WHERE id = ?',('0', id,))
        await bot.send_message(call.from_user.id, f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {id}</b> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        await tradebot.send_message(id, f'<b>–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã</b>')

@dp.callback_query_handler(text_startswith="VerifkaUserID")
async def setchatlinkk(call: types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'trade':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET verif = ? WHERE id = ?',('1', id,))
        await bot.send_message(call.from_user.id, f'–ì–æ—Ç–æ–≤–æ, –º–∞–º–æ–Ω—Ç —Å ID <code>{id}</code> –ø–æ–ª—É—á–∏–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é')

@dp.callback_query_handler(text_startswith="UnVerifkaUserID")
async def setchatlinkk(call: types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'trade':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET verif = ? WHERE id = ?',('0', id,))
        await bot.send_message(call.from_user.id, f'–ì–æ—Ç–æ–≤–æ, —É –º–∞–º–æ–Ω—Ç–∞ —Å ID <code>{id}</code> –±—ã–ª–∞ –∏–∑—ä—è—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è')

@dp.callback_query_handler(text_startswith="BlockVivod")
async def setchatlinkk(call: types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'trade':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET block_vivod = ? WHERE id = ?',('1', id,))
        await bot.send_message(call.from_user.id, f'–ì–æ—Ç–æ–≤–æ, –º–∞–º–æ–Ω—Ç—É —Å ID <code>{id}</code> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—ã–≤–æ–¥')

@dp.callback_query_handler(text_startswith="UnBlockVivid")
async def setchatlinkk(call: types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'trade':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET block_vivod = ? WHERE id = ?',('0', id,))
        await bot.send_message(call.from_user.id, f'–ì–æ—Ç–æ–≤–æ, –º–∞–º–æ–Ω—Ç—É —Å ID <code>{id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤—ã–≤–æ–¥')

@dp.callback_query_handler(text_startswith="BlockStavka")
async def setchatlinkk(call: types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'trade':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET block_treid = ? WHERE id = ?',('1', id,))
        await bot.send_message(call.from_user.id, f'–ì–æ—Ç–æ–≤–æ, –º–∞–º–æ–Ω—Ç—É —Å ID <code>{id}</code> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ç—Ä–µ–π–¥')

@dp.callback_query_handler(text_startswith="UnBlockStavka")
async def setchatlinkk(call: types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'trade':
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE mamonts_trade SET block_treid = ? WHERE id = ?',('0', id,))
        await bot.send_message(call.from_user.id, f'–ì–æ—Ç–æ–≤–æ, –º–∞–º–æ–Ω—Ç—É —Å ID <code>{id}</code> —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ç—Ä–µ–π–¥')

@dp.callback_query_handler(text_startswith="GiveBalance") 
async def check_pay(call:types.CallbackQuery,state:FSMContext):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,f'<b>–ù–∞–ø–∏—à–∏ —Å–∫–æ–ª—å–∫–æ —Å–¥–µ–ª–∞—Ç—å</b>')
    await GiveBalance.first()
    async with state.proxy() as data:
        data['id'] = id
        data['huy'] = type

@dp.message_handler(state=GiveBalance.q1)
async def admin_8(message:types.Message,state:FSMContext):
    data = await state.get_data()
    userrr = data['id']
    dasasd = data['huy']
    check = await functions.GiveBalance(userrr,dasasd,message.text)
    if check is False:
        await message.answer('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>')
    else:
        await message.answer('<b>–£—Å–ø–µ—à–Ω–æ!</b>')
    await state.finish()

@dp.callback_query_handler(text_startswith="gobalanc") 
async def check_pay(call:types.CallbackQuery):
    id,type = call.data.split(",")[1],call.data.split(",")[2]
    if type == 'arbitrage':
        await arbitrbot.send_message(id, 'üí∞–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞üí∞')
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–≤–æ–¥ –º–∞–º–æ–Ω—Ç–∞.')
    elif type == 'casino':
        await casinobot.send_message(id, 'üí∞–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞üí∞')
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–≤–æ–¥ –º–∞–º–æ–Ω—Ç–∞.')
    else:
        await tradebot.send_message(id, 'üí∞–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞üí∞')
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–≤–æ–¥ –º–∞–º–æ–Ω—Ç–∞.')

@dp.callback_query_handler(text_startswith="netbalanc") 
async def check_pay(call:types.CallbackQuery):
    id,bal,type = call.data.split(",")[1],call.data.split(",")[2],call.data.split(",")[3]
    if type == 'arbitrage':
        with sqlite3.connect(bd) as c:
            c.execute("UPDATE mamonts_arbitr SET balance = balance + ? WHERE id = ?", (bal,id,)) 
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await arbitrbot.send_message(id, 'üö´–í–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –æ–¥–Ω–æ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω:\nüëÆ‚Äç‚ôÇ –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –ø–æ–ø–æ–ª–Ω—è–ª–∏üëÆ‚Äç‚ôÇ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É') 
        await bot.send_message(call.from_user.id,f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ –º–∞–º–æ–Ω—Ç–∞ {id}')
    elif type == 'casino':
        with sqlite3.connect(bd) as c:
            c.execute("UPDATE mamonts_trade SET balance = balance + ? WHERE id = ?", (bal,id,)) 
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await casinobot.send_message(id, 'üö´–í–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –æ–¥–Ω–æ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω:\nüëÆ‚Äç‚ôÇ –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –ø–æ–ø–æ–ª–Ω—è–ª–∏üëÆ‚Äç‚ôÇ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É') 
        await bot.send_message(call.from_user.id,f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ –º–∞–º–æ–Ω—Ç–∞ {id}')
    else:
        with sqlite3.connect(bd) as c:
            c.execute("UPDATE mamonts_trade SET balance = balance + ? WHERE id = ?", (bal,id,)) 
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await tradebot.send_message(id, 'üö´–í–∞–º –±—ã–ª–æ –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –æ–¥–Ω–æ–π –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω:\nüëÆ‚Äç‚ôÇ –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –ø–æ–ø–æ–ª–Ω—è–ª–∏üëÆ‚Äç‚ôÇ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É') 
        await bot.send_message(call.from_user.id,f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–≤–æ–¥ –º–∞–º–æ–Ω—Ç–∞ {id}')

@dp.callback_query_handler(text_startswith="popolnyda") 
async def check_pay(call:types.CallbackQuery):
    id,price,bot,comment = call.data.split(",")[1], call.data.split(",")[2], call.data.split(",")[3],call.data.split(",")[4]
    with sqlite3.connect(bd) as c:
        c.execute(f"UPDATE pays SET status = '1' WHERE comment = {comment}")
    if bot == 'arbitrage':
        with sqlite3.connect(bd) as c:
            c.execute("UPDATE mamonts_arbitr SET balance = balance + ? WHERE id = ?", (price,id,))
        await call.message.edit_text('–ì–æ—Ç–æ–≤–æ')
    elif bot == 'casino':
        with sqlite3.connect(bd) as c:
            c.execute("UPDATE mamonts_casino SET balance = balance + ? WHERE id = ?", (price,id,))
        await call.message.edit_text('–ì–æ—Ç–æ–≤–æ')
    else:
        with sqlite3.connect(bd) as c:
            c.execute("UPDATE mamonts_trade SET balance = balance + ? WHERE id = ?", (price,id,))
        await call.message.edit_text('–ì–æ—Ç–æ–≤–æ')

@dp.message_handler(state=Waits.q1)
async def ChangeLimits(message:types.Message, state:FSMContext):
    await config_set_value('limit_link',message.text)
    await message.answer('<b>‚úÖ –ó–∞–º–µ–Ω–∏–ª –ª–∏–º–∏—Ç!</b>', parse_mode='HTML')
    await state.finish()

@dp.message_handler(commands=['–∫—É—Ä–∞—Ç–æ—Ä—ã'], commands_prefix='/')
async def kurator(message):
    if message.chat.type == 'private':
        pass
    else:
        text1 = f'''
        @otec_amsterdam | {'–û–Ω–ª–∞–π–Ω üü¢' if get_config("status_kur") == '1' else '–û—Ñ—Ñ–ª–∞–π–Ω üî¥'}'''
        kuri = types.InlineKeyboardMarkup()
        kuri.add(types.InlineKeyboardButton (text=text1, callback_data='kurik1', url='https://t.me/otec_amsterdam'))
    await message.answer("<b>üßæ –°–ø–∏—Å–æ–∫ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤:</b>", reply_markup=kuri, parse_mode = 'HTML')
    return

@dp.message_handler(commands=['–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã'], commands_prefix='/')
async def kurator(message):
    if message.chat.type == 'private':
        pass
    else:
        text1 = f'''
        @Yeg00rka | {'–û–Ω–ª–∞–π–Ω üü¢' if get_config("status_moder") == '1' else '–û—Ñ—Ñ–ª–∞–π–Ω üî¥'}'''
        moder = types.InlineKeyboardMarkup()
        moder.add(types.InlineKeyboardButton (text=text1, callback_data='moder1', url='https://t.me/Yeg00rka'))
    await message.answer("<b>üßæ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>", reply_markup=moder, parse_mode = 'HTML')
    return

@dp.message_handler(commands=['rules'], commands_prefix='/')
async def rulesss(message):
    if message.chat.type == 'private':
        pass
    else:
        text1 = f'''
        ‚õîÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞'''
        ruleskb = types.InlineKeyboardMarkup()
        ruleskb.add(types.InlineKeyboardButton (text=text1, callback_data='rules_channel', url='https://t.me/'))
    await message.answer("<b>–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –º–æ–∂–Ω–æ –∑–¥–µ—Å—å üëá:</b>", reply_markup=ruleskb, parse_mode = 'HTML')
    return

@dp.message_handler(commands=['–ª–∏–º–∏—Ç—ã'], commands_prefix='/')
async def limitsss(message):
    if message.chat.type == 'private':
        pass
    else:
        await bot.send_photo(config.LOG_CHANNEL, photo=get_config("limit_link"), caption=f'–õ–∏–º–∏—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', parse_mode = 'HTML')
        return

@dp.message_handler(commands=['–∑–∞–∫—Ä–µ–ø'], commands_prefix='/')
async def rulesss(message):
    if message.chat.type == 'private':
        pass
    else:
        text1 = f'''
        –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫—Ä–µ–ø—É'''
        zakrepkb = types.InlineKeyboardMarkup()
        zakrepkb.add(types.InlineKeyboardButton (text=text1, callback_data='zakrep', url='https://t.me/c/1795678620/2153'))
    await message.answer("<b>–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∑–∞–∫—Ä–µ–ø–æ–º –º–æ–∂–Ω–æ –∑–¥–µ—Å—å üëá:</b>", reply_markup=zakrepkb, parse_mode = 'HTML')
    return

@dp.message_handler(commands=['faq'], commands_prefix='/')
async def faqqq(message: types.Message):
    if message.chat.type == 'private':
        pass
    else:
        p = types.InlineKeyboardMarkup(row_width=1)
        p.add(
            types.InlineKeyboardButton(text='‚ùî–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', callback_data='faqsss', url='https://t.me/')
        )
        await message.answer(
            f'<b>–°–º–æ—Ç—Ä–∏ –∑–∞–∫—Ä–µ–ø üëá</b>', parse_mode='HTML', reply_markup=p
        )

@dp.message_handler(commands=['–≤—ã–ø–ª–∞—Ç–∞'], commands_prefix='/')
async def viplata(message: types.Message):
    if message.chat.type == 'private':
        pass
    else:
        m = types.InlineKeyboardMarkup(row_width=1)
        m.add(
            types.InlineKeyboardButton(text='üíé –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–ø–ª–∞—Ç–µ', callback_data='payss', url='https://t.me/MoneyRainPay')
        )
        await message.answer(
            f'<i>üí∞ –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–µ –ª–∞–≤–µ</i>\n\n'
            f'<a href="https://telegra.ph/Kak-poluchit-vyplatu-09-15"> <b>‚ùóÔ∏è–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –ø–∏—Å–∞—Ç—å, –ø—Ä–æ—á—Ç–∏</b></a> <i>- (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</i>', parse_mode='HTML', reply_markup=m
        )

@dp.message_handler(commands=['–∑–∞–π–º—ã'], commands_prefix='/')
async def microo(message: types.Message):
    if message.chat.type == 'private':
        pass
    else:
        q = types.InlineKeyboardMarkup(row_width=2)
        q.add(
            types.InlineKeyboardButton(text='üí≤–ö—Ä–µ–¥–∏—Ç –ü–ª—é—Å', callback_data='kredit+', url='https://creditplus.ru'),
            types.InlineKeyboardButton(text='ü•¨ –ï-–∫–∞–ø—É—Å—Ç–∞', callback_data='kapusta', url='https://ekapusta.com'),
            types.InlineKeyboardButton(text='üí∏ –ú–∞–Ω–∏–º–µ–π–Ω', callback_data='moneymen', url='https://moneyman.ru'),
            types.InlineKeyboardButton(text='ü§ñ –ó–∞–π–º–µ—Ä', callback_data='zaimer', url='https://www.zaymer.ru'),
            types.InlineKeyboardButton(text='üëæ –í–µ–±-–∑–∞–π–º', callback_data='vedzaim', url='https://web-zaim.ru'),
            types.InlineKeyboardButton(text='üí∑ –ö—Ä–µ–¥–∏—Ç–æ 24', callback_data='24', url='https://kredito24.ru'),
            types.InlineKeyboardButton(text='üí≥ –ú–∏–≥–ö—Ä–µ–¥–∏—Ç', callback_data='migomnaxyi', url='https://migcredit.ru'),
            types.InlineKeyboardButton(text='üí∞–î–∂–æ–π –ú–∞–Ω–∏', callback_data='dshoi', url='https://joy.money'),
            types.InlineKeyboardButton(text='üè¶ –í–µ–±–±–∞–Ω–∫–∏—Ä', callback_data='vebbbb', url='https://webbankir.com'),
            types.InlineKeyboardButton(text='üí∂ –ü–ª–∞—Ç–∏–∑–∞', callback_data='platizaaa', url='https://platiza.ru'),
            types.InlineKeyboardButton(text='üöÄ –¢—É—Ä–±–æ–∑–∞–π–º', callback_data='turboo', url='https://turbozaim.ru')
        )
        await message.answer(
            f'–°–ø–∏—Å–æ–∫ –∑–∞–π–º–æ–≤:', reply_markup=q
        )

@dp.message_handler(commands=['help'], commands_prefix='/')
async def helps(message: types.Message):
    if message.chat.type == 'private':
        pass
    else:
        text1 = f'''
        <b>üìÑ –ö–æ–º–∞–Ω–¥—ã</b> —á–∞—Ç–∞
        
/top - –¢–æ–ø –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
/topd - –¢–æ–ø –∑–∞ –¥–µ–Ω—å
        
/–∫—É—Ä–∞—Ç–æ—Ä—ã - –ò–Ω—Ñ–æ –æ –∫—É—Ä–∞—Ç–æ—Ä–∞—Ö
/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã - –ò–Ω—Ñ–æ –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞—Ö
/–≤—ã–ø–ª–∞—Ç–∞ - –ò–Ω—Ñ–∞ –æ –≤—ã–ø–ª–∞—Ç–µ (–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å)
/me - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ –æ —Å–µ–±–µ
/card - –ö–∞—Ä—Ç–∞ –¥–ª—è –ü–ü
/–ª–∏–º–∏—Ç—ã - –õ–∏–º–∏—Ç—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
/–º–∞—Ç–µ—Ä–∏–∞–ª—ã - –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –≤–æ—Ä–∫–∞
/–ø—Ä–æ—Ñ–∏—Ç—ã - –ö–∞–Ω–∞–ª —Å –ø—Ä–æ—Ñ–∏—Ç–∞–º–∏
/–∑–∞–∫—Ä–µ–ø - –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫—Ä–µ–ø
/rules - –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞
/–∑–∞–π–º—ã - –°–ø–∏—Å–æ–∫ –∑–∞–π–º–æ–≤
/faq - –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        '''
        await message.answer(
            text=text1, parse_mode='HTML'
        )

@dp.message_handler(commands=['–º–∞—Ç–µ—Ä–∏–∞–ª—ã'], commands_prefix='/') #–º–∞—Ç–µ—Ä–∏–∞–ª—ã
async def materials(message):
    if message.chat.type == 'private':
        pass
    else:
        d = types.InlineKeyboardMarkup(row_width=1)
        d.add(
        types.InlineKeyboardButton(text='üé≤ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data='cykabilyat', url='https://t.me/+eZhlRe26WFxmYThi')
    )
    await message.answer(
        f'–ö–∞–Ω–∞–ª —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏:', reply_markup=d
    )
    return

@dp.message_handler(commands=['–ø—Ä–æ—Ñ–∏—Ç—ã'], commands_prefix='/') #–∫–∞–Ω–∞–ª —Å –ø—Ä–æ—Ñ–∏—Ç–∞–º–∏
async def projekts(message: types.Message):
    if message.chat.type == 'private':
        pass
    else:
        z = types.InlineKeyboardMarkup(row_width=1)
        z.add(
            types.InlineKeyboardButton(text='üéÑ –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É —Å –ø—Ä–æ—Ñ–∏—Ç–∞–º–∏', callback_data='profa', url='https://t.me/+hGkvR4e57Y1kNmQ6')
        )
        await message.answer(f'–ö–∞–Ω–∞–ª —Å –ø—Ä–æ—Ñ–∏—Ç–∞–º–∏:', reply_markup=z)

@dp.message_handler(commands=['me'], commands_prefix='/')
async def meebro(message: types.Message):
    if message.chat.type == 'private':
        pass
    else:
        with sqlite3.connect(bd) as c:
            result = c.execute(f"SELECT warn_count FROM workers WHERE id = {message.from_user.id}").fetchone()[0]
            info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
            get_s_profits = c.execute(f'SELECT * FROM profits WHERE user_id = {message.from_user.id}').fetchall()
            l_profits = len(get_s_profits)
            s_profits = 0
            now = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            diff = datetime.strptime(
                now, "%d.%m.%Y %H:%M:%S"
            ) - datetime.strptime(info[15], "%d.%m.%Y %H:%M:%S")
            for i in get_s_profits:
                 s_profits += i[1]
            try:
               
                average_profit = s_profits / l_profits
            except:
                average_profit = 0
            text = f'''
            <b>üë®‚Äçüíª –í–æ—Ä–∫–µ—Ä</b> - <a href="https://t.me/{message.from_user.username}"> {message.from_user.username}</a>
Telegram ID: {message.from_user.id}
            
–ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{info[4]} RUB</b>
–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: <b>{average_profit} RUB</b>
            
<i>–í –∫–æ–º–∞–Ω–¥–µ: {diff.days} –¥–Ω–µ–π, {result} –≤–∞—Ä–Ω–æ–≤</i>
            '''
            text1 = f'''
            <b>üë®‚Äçüíª –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b> - <a href="https://t.me/{message.from_user.username}"> {message.from_user.username}</a>
Telegram ID: {message.from_user.id}
            
–ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{info[4]} RUB</b>
–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: <b>{average_profit} RUB</b>
            
<i>–í –∫–æ–º–∞–Ω–¥–µ: {diff.days} –¥–Ω–µ–π, {result} –≤–∞—Ä–Ω–æ–≤</i>
            '''
            text2 = f'''
            <b>üë®‚Äçüíª –ö—É—Ä–∞—Ç–æ—Ä</b> - <a href="https://t.me/{message.from_user.username}"> {message.from_user.username}</a>
Telegram ID: {message.from_user.id}
            
–ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{info[4]} RUB</b>
–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: <b>{average_profit} RUB</b>
            
<i>–í –∫–æ–º–∞–Ω–¥–µ: {diff.days} –¥–Ω–µ–π, {result} –≤–∞—Ä–Ω–æ–≤</i>
            '''
            text3 = f'''
            <b>üë®‚Äçüíª –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</b> - <a href="https://t.me/{message.from_user.username}"> {message.from_user.username}</a>
Telegram ID: {message.from_user.id}
            
–ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É: <b>{info[4]} RUB</b>
–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: <b>{average_profit} RUB</b>
            
<i>–í –∫–æ–º–∞–Ω–¥–µ: {diff.days} –¥–Ω–µ–π, {result} –≤–∞—Ä–Ω–æ–≤</i>
            '''
            if message.from_user.id == int(config.ADMIN):
                await message.answer(text1, parse_mode='HTML')
            elif info[5] == 1:
                await message.answer(text3, parse_mode='HTML')
            elif info[9] == 1:
                await message.answer(text2, parse_mode='HTML')
            elif info[13] == 1:
                await message.answer(text1, parse_mode='HTML')
            else:
                await message.answer(text, parse_mode='HTML')

@dp.callback_query_handler(text_startswith="pencil") 
async def check_pay(call:types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,f'<b>–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:ID –≤–æ—Ä–∫–µ—Ä–∞:@UserName:–°—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞</b>\n<i>–ü—Ä–∏–º–µ—Ä:</i> <code>–ê—Ä–±–∏—Ç—Ä–∞–∂:20043256:@Gangster:1590</code>')
    await Pencil.first()

@dp.message_handler(state=Pencil.q1)
async def admin_8(message:types.Message,state:FSMContext):
    check = await functions.penciil(message.text)
    if check is False:
        await message.answer('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>')
    else:
        await message.answer('<b>–£—Å–ø–µ—à–Ω–æ!</b>')
    await state.finish()

@dp.callback_query_handler(text="rassilka")
async def spammer(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É</b>", reply_markup=menu.bots)

@dp.message_handler(commands=["card"], commands_prefix="/")
async def cmd_ban(message: types.Message):
    if message.chat.type == 'private':
        pass
    else:
        with sqlite3.connect(bd) as conn:
            cur = conn.cursor()
            cur.execute("SELECT pryamik FROM workers;")
            one_result = cur.fetchall()[0][0]
            conn.commit()
            await message.reply(f"üí≥ –¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∞: <code>{one_result}</code> (–æ—Ç 1–∫ RUB)\n\n<b>‚ùóÔ∏è–û–°–¢–û–†–û–ñ–ù–û! –í–ê–ú –ú–û–ñ–ï–¢ –û–¢–ü–ò–°–ê–¢–¨ –§–ï–ô–ö. –ß–ï–ö–ò –°–ö–ò–î–´–í–ê–¢–¨ –¢–û–õ–¨–ö–û: @</b>", parse_mode='HTML')

@dp.callback_query_handler(text="prymoy")
async def smena_cards(call: types.CallbackQuery):
    try:
        await call.message.delete()
        await bot.send_message(call.from_user.id,'üí≥ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:')
        await PryamikCard.q1.set()
    except Exception as e:
        print(e)

@dp.message_handler(state=PryamikCard.q1)
async def prymoi(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
        await state.finish()
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
        await state.finish()
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
        await state.finish()
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
        await state.finish()
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
        await state.finish()
    else:
        try:
            await state.update_data(q1=message.text)
            await state.finish()
            conn = sqlite3.connect(bd)
            with conn:
                cur = conn.cursor()
                cur.execute(f'UPDATE workers SET pryamik = {message.text}')
                conn.commit()
            await bot.send_message(message.from_user.id,'‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∞—Å—å')
            await bot.send_message(config.LOG_CHANNEL, f'<b>‚ùóÔ∏è–ö–∞—Ä—Ç–∞ –¥–ª—è –ü–ü –∏–∑–º–µ–Ω–∏–ª–∞—Å—å\n\n–ß—Ç–æ–± —É–∑–Ω–∞—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø—Ä–æ–ø–∏—à–∏—Ç–µ /card</b>', parse_mode='HTML')
        except Exception as e:
            await state.finish()
            print(e)

@dp.callback_query_handler(text="ArbitrageRassilka")
async def spammer(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await ReklamaArbitrage.q1.set()

@dp.message_handler(state=ReklamaArbitrage.q1)
async def spammers(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            users = c.execute("SELECT id FROM mamonts_arbitr").fetchall()
        for user in users:
            try:
                await arbitrbot.send_message(chat_id=f'{user[0]}', text=f'{message.text}')
            except:
                await asyncio.sleep(1)
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await state.finish()

@dp.callback_query_handler(text="WorkersRassilka")
async def spammer(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await ReklamaWorkers.q1.set()

@dp.message_handler(state=ReklamaWorkers.q1)
async def spammers(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            users = c.execute("SELECT id FROM workers").fetchall()
        for user in users:
            try:
                await bot.send_message(chat_id=f'{user[0]}', text=f'{message.text}')
            except:
                await asyncio.sleep(1)
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await state.finish()

@dp.callback_query_handler(text="SetChatLink")
async def setchatlinkk(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await ChatLinkUrl.q1.set()

@dp.message_handler(state=ChatLinkUrl.q1)
async def chatlinkk(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE settings SET channel_link = ? WHERE PoweredAkatsuki = ?',(message.text, '777',))
        await message.answer("–ì–æ—Ç–æ–≤–æ")
    await state.finish()

@dp.callback_query_handler(text='report_kakoito')
async def report_kakoito(q: types.CallbackQuery, state: FSMContext):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {q.from_user.id}').fetchone()
    if info[16] == 0:
        await bot.answer_callback_query(q.id)
        await q.message.delete()
        await bot.send_message(q.from_user.id,f'''
        <b>–£–∫–∞–∂–∏ –ø—Ä–∏—á–∏–Ω—É —Ä–µ–ø–æ—Ä—Ç–∞, —Ç–≤–æ—é –∂–∞–ª–æ–±—É —É–≤–∏–¥—è—Ç –¢–°'—ã –ø—Ä–æ–µ–∫—Ç–∞. –î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø–∏—à–∏:</b> <code>–û—Ç–º–µ–Ω–∞</code>\n\n<b>‚ùóÔ∏èP.S. –ï—Å–ª–∏ –∂–∞–ª–æ–±–∞ –∏–¥–µ—Ç –Ω–∞ —Å—Ç–∞—Ñ—Ñ –∏–ª–∏ –∂–µ –Ω–∞ –≤–æ—Ä–∫–µ—Ä–∞, –Ω–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å @—é–∑–µ—Ä–Ω–µ–π–º!</b>''' ,reply_markup=menu.otm, parse_mode='HTML')
        await Report.q1.set()
    elif info[10] == 1:
        pass
    else:
        pass

    @dp.message_handler(state=Report.q1)
    async def get_report(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data["report"] = message.text
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
            if "–û—Ç–º–µ–Ω–∞" in message.text:
                await message.answer("<b>‚úÖ –û—Ç–º–µ–Ω–∞!</b>" , reply_markup=menu.mainkb, parse_mode='HTML')
                await state.finish()
            elif "–ü—Ä–æ—Ñ–∏–ª—å üìÅ" in message.text:
                await message.answer("<b>üõë –í–∞—à —Ä–µ–ø–æ—Ä—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –û–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É, –∏ –Ω–µ —Å–ø–∞–º—å—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø–∏—à–∏:</b> <code>–û—Ç–º–µ–Ω–∞</code>", parse_mode='HTML')
                await Report.q1.set()
            elif "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê" in message.text:
                await message.answer("<b>üõë –í–∞—à —Ä–µ–ø–æ—Ä—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –û–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É, –∏ –Ω–µ —Å–ø–∞–º—å—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø–∏—à–∏:</b> <code>–û—Ç–º–µ–Ω–∞</code>", parse_mode='HTML')
                await Report.q1.set()
            elif "–ö–∞–∑–∏–Ω–æ üé∞" in message.text:
                await message.answer("<b>üõë –í–∞—à —Ä–µ–ø–æ—Ä—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –û–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É, –∏ –Ω–µ —Å–ø–∞–º—å—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø–∏—à–∏:</b> <code>–û—Ç–º–µ–Ω–∞</code>", parse_mode='HTML')
                await Report.q1.set()
            elif "–¢—Ä–µ–π–¥–∏–Ω–≥ üìà" in message.text:
                await message.answer("<b>üõë –í–∞—à —Ä–µ–ø–æ—Ä—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –û–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É, –∏ –Ω–µ —Å–ø–∞–º—å—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø–∏—à–∏:</b> <code>–û—Ç–º–µ–Ω–∞</code>", parse_mode='HTML')
                await Report.q1.set()
            elif "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª" in message.text:
                await message.answer("<b>üõë –í–∞—à —Ä–µ–ø–æ—Ä—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –û–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É, –∏ –Ω–µ —Å–ø–∞–º—å—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø–∏—à–∏:</b> <code>–û—Ç–º–µ–Ω–∞</code>", parse_mode='HTML')
                await Report.q1.set()
            elif info[16] == 1:
                pass
            elif len(message.text.strip()) < 3:
                await message.answer("<b>üõë –í–∞—à —Ä–µ–ø–æ—Ä—Ç –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –í –Ω–µ–º –º–µ–Ω–µ–µ 3-–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ —É—á–∏—Ç—ã–≤–∞—è –ø—Ä–æ–±–µ–ª—ã. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É/–∂–∞–ª–æ–±—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–ø–∏—à–∏:</b> <code>–û—Ç–º–µ–Ω–∞</code>", parse_mode='HTML')
            else:
                await message.answer("<b>–ì–æ—Ç–æ–≤–æ ‚úÖ</b>\n\n–í–∞—à—É –∂–∞–ª–æ–±—É —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞.\n\n<i>–ö–∞–∫ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –±–æ—Ç –æ–ø–æ–≤–µ—Å—Ç–∏—Ç –í–∞—Å!</i>", parse_mode='HTML')
                await bot.send_message(REPORT_ID, f'<b>üë∑‚Äç‚ôÇÔ∏è –í–æ—Ä–∫–µ—Ä @{q.from_user.username} –∑–∞–ø–æ–ª–Ω–∏–ª —Ä–µ–ø–æ—Ä—Ç —Å—Ç—Ä–æ–∫—É.</b>\n\n<b>–ñ–∞–ª–æ–±–∞:</b> <i>{data["report"]}</i>', parse_mode='HTML', reply_markup=menu.action_q(q.from_user.id))
                await state.finish()

    @dp.callback_query_handler(text_startswith="q", state="*")
    async def qd(call: types.CallbackQuery):
        variant = call.data.split(":")[1]
        id = call.data.split(":")[2]
        if variant == "ok":
            await bot.send_message(id, f'‚úÖ <b>–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞!</b>\n\n<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–µ–¥–ø—Ä–∏–º–µ—Ç –≤—Å–µ –º–µ—Ä—ã —á—Ç–æ–± —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –Ω–µ–ø–æ–ª–∞–¥–∫—É/–Ω–∞–∫–∞–∑–∞—Ç—å –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.</i>', parse_mode='HTML')
            await call.message.edit_text(call.message.text + "\n\n‚úÖ –†–µ—à–µ–Ω–æ")
        elif variant == "deny":
            await bot.send_message(id, '<b>üõë –í–∞—à —Ä–µ–ø–æ—Ä—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n<i>–ü—Ä–∏—á–∏–Ω—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–≤–µ:</i>\n\n<b>1Ô∏è‚É£ –ñ–∞–ª–æ–±–∞ –Ω–µ—Å–æ–æ—Ç—Å—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ª–∏–±–æ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—à–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–æ–∫–æ–∑–∞—Ç–µ–ª—å—Å—Ç–≤.\n2Ô∏è‚É£ –≠—Ç–æ –±—ã–ª —Å–ø–∞–º —Ä–µ–ø–æ—Ä—Ç.</b>\n\n<i>–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ–±–æ –≤—Å–µ–º –≤ –ª—Å –≥–ª–∞–≤–Ω–æ–º—É –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @mdspak.</i>', parse_mode='HTML')
            await call.message.edit_text(call.message.text + "\n\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")

@dp.callback_query_handler(text="dobavilts")
async def ts2xvnax(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Å–æ–º</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await TS2XV.q1.set()

@dp.message_handler(state=TS2XV.q1)
async def ts2xvaxyet(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET ts2 = ? WHERE id = ?',('1', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - –¢–°')
        await bot.send_message(message.text, '<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º!\n–¢—ã —Ç–µ–ø–µ—Ä—å –¢–°</b>')
    await state.finish()

@dp.callback_query_handler(text="BlockingUser")
async def BlockingUserinZaya(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–º—É –Ω–∞–¥–æ –¥–∞—Ç—å –±–∞–Ω.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await Ban.q1.set()

@dp.callback_query_handler(text="BlockingUser1")
async def BlockingUserinZaya(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[5] == 1:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–º—É –Ω–∞–¥–æ –¥–∞—Ç—å –±–∞–Ω.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
        await Ban.q1.set()
    else:
        pass

@dp.message_handler(state=Ban.q1)
async def Bannaxui(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET block = ? WHERE id = ?',('1', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - –∑–∞–±–∞–Ω–µ–Ω')
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ –±–∞–Ω–µ
        photo = open("Worker/1.jpg", "rb")
        await bot.send_photo(message.from_user.id, photo, parse_mode='HTML')
        await bot.send_message(message.text, '<b>ü§° –¢—ã –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω!</b>', reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

@dp.callback_query_handler(text="UnBlockingUser")
async def UnBlockingUserinZaya(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–≥–æ –Ω–∞–¥–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await RazBan.q1.set()

@dp.callback_query_handler(text="UnBlockingUser1")
async def UnBlockingUserinZaya(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[5] == 1:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–≥–æ –Ω–∞–¥–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
        await RazBan.q1.set()
    else:
        pass

@dp.message_handler(state=RazBan.q1)
async def Bannaxui(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET block = ? WHERE id = ?',('0', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        await bot.send_message(message.text, '<b>‚úÖ –í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏!\n\nü•≥ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º )</b>', reply_markup=menu.mainkb)
    await state.finish()

@dp.callback_query_handler(text="BlockRep")
async def BlockReport(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–º—É –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await BanReport.q1.set()

@dp.callback_query_handler(text="BlockRep1")
async def BlockReport(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[9] == 1:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–º—É –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
        await BanReport.q1.set()
    else:
        pass

@dp.callback_query_handler(text="BlockRep2")
async def BlockReport(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[5] == 1:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–º—É –Ω—É–∂–Ω–æ –∑–∞–±–∞–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
        await BanReport.q1.set()
    else:
        pass

@dp.message_handler(state=BanReport.q1)
async def Bannaxui(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET ban_report = ? WHERE id = ?',('1', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {message.text}</b> - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ–ø–æ—Ä—Ç')
        await bot.send_message(message.text, '<b>‚ùóÔ∏è–í–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–ø–æ—Ä—Ç.\n\nüí† –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –∏–∑-–∑–∞ —Ç–æ–≥–æ —á—Ç–æ –í–∞—à–∏ —Ä–µ–ø–æ—Ä—Ç—ã –±—ã–ª–∏ —Å–ø–∞–º–æ–º –∏–ª–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n‚ö†Ô∏è –†–∞–∑–±–∞–Ω –≤ —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏—à—å –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ï—Å–ª–∏ —Ä–µ–ø–æ—Ä—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫, –Ω–∞–ø–∏—à–∏—Ç–µ @mdspak</b>')
    await state.finish()

@dp.callback_query_handler(text="UnBlockRep")
async def UnBlockReport(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–º—É –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await RazbanReport.q1.set()

@dp.callback_query_handler(text="UnBlockRep1")
async def UnBlockReport(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[9] == 1:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–º—É –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
        await RazbanReport.q1.set()
    else:
        pass

@dp.callback_query_handler(text="UnBlockRep2")
async def UnBlockReport(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[5] == 1:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≥–æ –∫–æ–º—É –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∞–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
        await RazbanReport.q1.set()
    else:
        pass

@dp.message_handler(state=RazbanReport.q1)
async def Bannaxui(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET ban_report = ? WHERE id = ?',('0', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {message.text}</b> - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ä–µ–ø–æ—Ä—Ç')
        await bot.send_message(message.text, '<b>‚úÖ –í–∞–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–ø–æ—Ä—Ç</b>')
    await state.finish()

@dp.callback_query_handler(text="snyalts")
async def ts2otkis(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await TS2otkis.q1.set()

@dp.message_handler(state=TS2otkis.q1)
async def ts2otkisaxyet(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET ts2 = ? WHERE id = ?',('0', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - –±–æ–ª—å—à–µ –Ω–µ –¢–°')
        await bot.send_message(message.text, '<b>–ß–µ—Ä—Ç —á–µ–ª... —á—Ç–æ —Ç—ã –Ω–∞–¥–µ–ª–∞–ª...\n–¢—ã –±–æ–ª—å—à–µ –Ω–µ —ç–ª–∏—Ç–∞</b>', parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text="GiveKurator")
async def setchatlinkk(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await GiveKurator.q1.set()

@dp.message_handler(state=GiveKurator.q1)
async def chatlinkk(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET kurator = ? WHERE id = ?',('1', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - –∫—É—Ä–∞—Ç–æ—Ä')
        await bot.send_message(message.text, '<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º!\n–¢—ã —Ç–µ–ø–µ—Ä—å –∫—É—Ä–∞—Ç–æ—Ä</b>')
    await state.finish()

@dp.callback_query_handler(text="PickUpKurator")
async def setchatlinkk(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await PickUpKurator.q1.set()

@dp.message_handler(state=PickUpKurator.q1)
async def chatlinkk(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET kurator = ? WHERE id = ?',('0', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω', parse_mode='HTML')
        await bot.send_message(message.text, '<b>–ß–µ—Ä—Ç —á–µ–ª... —á—Ç–æ —Ç—ã –Ω–∞–¥–µ–ª–∞–ª...\n–¢—ã –±–æ–ª—å—à–µ –Ω–µ –∫—É—Ä–∞—Ç–æ—Ä</b>', parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text="privyazka")
async def zavyzan(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[9] == 1:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
        await GiveVorkforKur.q1.set()
    else:
        pass

@dp.message_handler(state=GiveVorkforKur.q1)
async def gives(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        if message.text.isdigit():
            with sqlite3.connect(bd) as c:
                c.execute('UPDATE workers SET podkurikom = ? WHERE id = ?',('1', message.text,))
            await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - –≤–∞—à —Ä–∞–±')
            await bot.send_message(message.text, '<b>‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n\n‚ùóÔ∏è–¢–µ–ø–µ—Ä—å —É –í–∞—Å –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä @otec_amsterdam\n\n–ï—Å–ª–∏ –í—ã —Å –¥–∞–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã –∏ –¥–∞–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –±–µ–∑ –í–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è - –ø–æ–¥–∞–π—Ç–µ —Ä–µ–ø–æ—Ä—Ç.</b>', parse_mode='HTML')
        else:
            await message.answer("<b>üõë –¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã, –≤–≤–µ–¥–∏ ID</b>", parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text="otvyzka")
async def setchatlinkk(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await PickUpVorkforKur.q1.set()

@dp.callback_query_handler(text="otvyzka1")
async def setchatlinkk(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[9] == 1:
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
        await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
        await PickUpVorkforKur.q1.set()
    else:
        pass

@dp.message_handler(state=PickUpVorkforKur.q1)
async def pickup(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        if message.text.isdigit():
            with sqlite3.connect(bd) as c:
                c.execute('UPDATE workers SET podkurikom = ? WHERE id = ?',('0', message.text,))
            await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - –æ—Ç–≤—è–∑–∞–Ω', parse_mode='HTML')
            await bot.send_message(message.text, '<b>‚ùóÔ∏è–í—ã –±—ã–ª–∏ –æ—Ç–≤—è–∑–∞–Ω—ã –æ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞.</b>', parse_mode='HTML')
        else:
            await message.answer("<b>üõë –¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã, –≤–≤–µ–¥–∏ ID</b>", parse_mode='HTML')
    await state.finish()

@dp.callback_query_handler(text="GiveModer")
async def gives(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await GiveModerator.q1.set()

@dp.message_handler(state=GiveModerator.q1)
async def givesm(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET moderator = ? WHERE id = ?',('1', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - –º–æ–¥–µ—Ä–∞—Ç–æ—Ä')
        await bot.send_message(message.text, '<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–≤—ã—à–µ–Ω–∏–µ–º!\n–¢—ã —Ç–µ–ø–µ—Ä—å —ç–ª–∏—Ç–∞</b>')
    await state.finish()

@dp.callback_query_handler(text="PickUpModer")
async def pickupm(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–∂–∞–ª–æ–≤–∞—Ç—å</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await PickUpModerator.q1.set()

@dp.message_handler(state=PickUpModerator.q1)
async def chatlinkk(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute('UPDATE workers SET moderator = ? WHERE id = ?',('0', message.text,))
        await message.answer(f'<b>–ì–æ—Ç–æ–≤–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {message.text}</b> - —Ä–∞–∑–∂–∞–ª–æ–≤–∞–Ω')
        await bot.send_message(message.text, '<b>–ß–µ—Ä—Ç —á–µ–ª... —á—Ç–æ —Ç—ã –Ω–∞–¥–µ–ª–∞–ª...\n–¢—ã –±–æ–ª—å—à–µ –Ω–µ —ç–ª–∏—Ç–∞</b>')
    await state.finish()

@dp.callback_query_handler(text_startswith="MailMamonts")
async def spammer(call: types.CallbackQuery,state:FSMContext):
    type = call.data.split(",")[1]
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await MailMamontsArbitrage.q1.set()
    async with state.proxy() as data:
        data['bot'] = type

@dp.message_handler(state=MailMamontsArbitrage.q1)
async def spammers(message: types.Message,state:FSMContext):
    data = await state.get_data()
    type = data['bot']
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        if type == 'arbitrage':
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
                users = c.execute(f'SELECT id FROM mamonts_arbitr WHERE referal = {info[3]}').fetchall()
            for user in users:
                try:
                    await arbitrbot.send_message(chat_id=f'{user[0]}', text=f'{message.text}')
                except:
                    await asyncio.sleep(1)
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        elif type == 'casino':
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
                users = c.execute(f'SELECT id FROM mamonts_casino WHERE referal = {info[3]}').fetchall()
            for user in users:
                try:
                    await casinobot.send_message(chat_id=f'{user[0]}', text=f'{message.text}')
                except:
                    await asyncio.sleep(1)
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        else:
            with sqlite3.connect(bd) as c:
                info = c.execute(f'SELECT * FROM workers WHERE id = {message.from_user.id}').fetchone()
                users = c.execute(f'SELECT id FROM mamonts_trade WHERE referal = {info[3]}').fetchall()
            for user in users:
                try:
                    await tradebot.send_message(chat_id=f'{user[0]}', text=f'{message.text}')
                except:
                    await asyncio.sleep(1)
            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await state.finish()

@dp.callback_query_handler(text="QiwiAdd")
async def spammer(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–Ω–æ–º–µ—Ä:–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:–¢–æ–∫–µ–Ω</b>\n–ü—Ä–∏–º–µ—Ä: 79006319484:eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6iMjAifX0:4d7618cd3f495dde5bca3sac2f\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏ -> <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await QiwiAdd.q1.set()

@dp.message_handler(state=QiwiAdd.q1)
async def spammers(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        check = await functions.upravkivi(message.text)
        if check is False:
            await message.answer('<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b>')
        else:
            await message.answer('<b>–£—Å–ø–µ—à–Ω–æ!</b>')
    await state.finish()

@dp.callback_query_handler(text="QiwiDelete")
async def spammer(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer('<b>–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞</b>')
    await QiwiDelete.q1.set()

@dp.message_handler(state=QiwiDelete.q1)
async def spammers(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        with sqlite3.connect(bd) as c:
            c.execute(f'DELETE FROM qiwis WHERE phone = {message.text}')
        await message.answer('<b>–£—Å–ø–µ—à–Ω–æ!</b>')
    await state.finish()

@dp.message_handler(text="getbd")
async def general_functions(message: types.Message):
    with open("database.db", "rb") as doc:
        await bot.send_document(config.ADMIN, doc, caption=f"<b>üì¶ BACKUP</b>")

@dp.callback_query_handler(text="QiwiList")
async def spammer(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    with sqlite3.connect(bd) as c:
        info = c.execute('SELECT * FROM qiwis').fetchall()
    for qiwases in info:
        await bot.send_message(call.from_user.id, text=f'–ö–æ—à–µ–ª–µ–∫: {qiwases[0]} P2P: {qiwases[1]}')

@dp.callback_query_handler(text="Mamontenok")
async def spammer(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer(f'<b>–í–≤–µ–¥–∏—Ç–µ –∞–π–¥–∏ –º–∞–º–æ–Ω—Ç–∞</b>')
    await Mamontenok.q1.set()

@dp.message_handler(state=Mamontenok.q1)
async def spammers(message: types.Message,state:FSMContext):
    try:
        with sqlite3.connect(bd) as c:
            mamontarb = c.execute(f'SELECT * FROM mamonts_arbitr WHERE id = {message.text}').fetchone()
            mamontcas = c.execute(f'SELECT * FROM mamonts_casino WHERE id = {message.text}').fetchone()
            mamonttra = c.execute(f'SELECT * FROM mamonts_trade WHERE id = {message.text}').fetchone()
        try:
            with sqlite3.connect(bd) as c:
                worker = c.execute(f'SELECT * FROM workers WHERE ref_code = {mamontarb[2]}').fetchone()
            await message.answer(f'–ê—Ä–±–∏—Ç—Ä–∞–∂\nID: {message.text}\n–£–¥–∞—á–∞: {mamontarb[5]}\n–ë–∞–ª–∞–Ω—Å: {mamontarb[3]}\n–ß–µ–π –º–∞–º–æ–Ω—Ç: {worker[1]}', reply_markup=menu.mamonttrademenu(message.text))
        except:
            await message.answer('–í –∞—Ä–±–∏—Ç—Ä–∞–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        try:
            with sqlite3.connect(bd) as c:
                worker = c.execute(f'SELECT * FROM workers WHERE ref_code = {mamontcas[2]}').fetchone()
            await message.answer(f'–ö–∞–∑–∏–Ω–æ\nID: {message.text}\n–£–¥–∞—á–∞: {mamontcas[5]}\n–ë–∞–ª–∞–Ω—Å: {mamontcas[3]}\n–ß–µ–π –º–∞–º–æ–Ω—Ç: {worker[1]}', reply_markup=menu.mamontcasinomenu(message.text))
        except:
            await message.answer('–í –∫–∞–∑–∏–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        try:
            with sqlite3.connect(bd) as c:
                worker = c.execute(f'SELECT * FROM workers WHERE ref_code = {mamonttra[2]}').fetchone()
            await message.answer(f'–¢—Ä–µ–π–¥\nID: {message.text}\n–£–¥–∞—á–∞: {mamonttra[5]}\n–ë–∞–ª–∞–Ω—Å: {mamonttra[3]}\n–ß–µ–π –º–∞–º–æ–Ω—Ç: {worker[1]}', reply_markup=menu.mamonttrademenu(message.text))
        except:
            await message.answer('–í —Ç—Ä–µ–π–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    except:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å —á—Ç–æ –∞–π–¥–∏ –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.')
    await state.finish()


@dp.message_handler(commands=['topd','top'])
async def top(message: types.Message):
    conn = sqlite3.connect(bd)
    cursor = conn.cursor()
    info = cursor.execute('SELECT * FROM stat').fetchone()
    text = ''
    if "topd" in message.text:
        msg = await functions.get_top_day()
        title = '–¢–æ–ø 10 –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å:'
    else:
        msg = await functions.get_top_all()
        title = '–¢–æ–ø 10 –≤–æ—Ä–∫–µ—Ä–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:'
    c = 0
    if not msg:
        await message.reply(f'<b>üëâ {title}</b>\n\nüí∏ –¢–æ–ø –ø—É—Å—Ç', parse_mode='HTML')
    else:
        for i in msg:
            try:
                user = await bot.get_chat(i[0])
                c += 1
                text+=f"<b>{c})</b> <a href='tg://user?id={i[0]}'>{user.first_name}</a> - <code>{i[1]} RUB</code> \n"
            except:
                pass
        await message.reply(f'<b>üëâ {title}</b>\n\n' + (text) + f'\n<b>üí∏ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è - {info[4]} RUB</b>', parse_mode='HTML')   
'''
async def resend_top_10_every_day():
    while True:
        await top_10()
        await asyncio.sleep(24*3600)'''

@dp.callback_query_handler(text="kurators")
async def kuratorsss(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
        text = f'''
        üíº –°–∏—Å—Ç–µ–º–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        
‚ùå –í—ã <b>–Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å</b> –∫—É—Ä–∞—Ç–æ—Ä–æ–º
‚ùå –£ –≤–∞—Å <b>–Ω–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞</b>
        
<b>‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ</b>
        
<i>–û—Ç–º–µ–Ω–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –∂–µ–ª–∞–Ω–∏—é –∫—É—Ä–∞—Ç–æ—Ä–∞.
–°–ø–∏—Å–æ–∫ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /–∫—É—Ä–∞—Ç–æ—Ä—ã –≤ —á–∞—Ç–µ.</i>
        '''
        text1 = f'''
        üíº –°–∏—Å—Ç–µ–º–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        
<b>‚úÖ –í—ã –∫—É—Ä–∞—Ç–æ—Ä</b>
        '''
        text2 = f'''
        üíº –°–∏—Å—Ç–µ–º–∞ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
        
‚ùå –í—ã <b>–Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å</b> –∫—É—Ä–∞—Ç–æ—Ä–æ–º
‚úÖ –£ –≤–∞—Å <b>–µ—Å—Ç—å –∫—É—Ä–∞—Ç–æ—Ä</b>
        
<b>‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ</b>
        
<i>–û—Ç–º–µ–Ω–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä—Å—Ç–≤–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ –∂–µ–ª–∞–Ω–∏—é –∫—É—Ä–∞—Ç–æ—Ä–∞.
–°–ø–∏—Å–æ–∫ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /–∫—É—Ä–∞—Ç–æ—Ä—ã –≤ —á–∞—Ç–µ.</i>
        '''
        if call.from_user.id == int(config.ADMIN):
            await call.message.answer(text, reply_markup=menu.invite, parse_mode='HTML')
        elif info[11] == 1:
            await call.message.answer(text2, parse_mode='HTML')
        elif info[9] == 1:
            await call.message.answer(text1, parse_mode='HTML')
        elif info[10] == 1:
            pass
        else:
            await call.message.answer(text, reply_markup=menu.invite, parse_mode='HTML')

@dp.callback_query_handler(text="dobavilsya")
async def zavyzan(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id,"<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID, –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫—É—Ä–∞—Ç–æ—Ä—É. –£–∑–Ω–∞—Ç—å ID –º–æ–∂–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.</b>\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ <code>–û—Ç–º–µ–Ω–∏—Ç—å</code>")
    await SamXV.q1.set()

@dp.message_handler(state=SamXV.q1)
async def gives(message: types.Message,state:FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ü—Ä–æ—Ñ–∏–ª—å üìÅ":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ê—Ä–±–∏—Ç—Ä–∞–∂ üåê":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–û –ø—Ä–æ–µ–∫—Ç–µ üë®‚Äçüíª":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    elif message.text == "–ö–∞–∑–∏–Ω–æ üé∞":
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–∏–ª–∏')
    else:
        if message.text.isdigit():
            with sqlite3.connect(bd) as c:
                c.execute('UPDATE workers SET podkurikom = ? WHERE id = ?',('1', message.text,))
            await message.answer(f'<b>‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n\n‚ùóÔ∏è–¢–µ–ø–µ—Ä—å —É –í–∞—Å –µ—Å—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä @otec_amsterdam</b>')
            await bot.send_message(GROUP_ID, f'<b>–ö –∫—É—Ä–∞—Ç–æ—Ä—É —Ä–∞–± –ø—Ä–∏—à–µ–ª —Å–∞–º @{message.from_user.username}</b>', parse_mode='HTML')
        else:
            await message.answer("<b>üõë –¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã, –≤–≤–µ–¥–∏ ID</b>", parse_mode='HTML')
    await state.finish()

@dp.message_handler(content_types=["new_chat_members"])
async def welcome_message(message: types.Message):
    p = types.InlineKeyboardMarkup()
    p.row(types.InlineKeyboardButton(text='–ó–∞–∫—Ä–µ–ø', callback_data='zakrep', url='https://t.me/c'))
    members = ", ".join([mess.get_mention(as_html=True) for mess in message.new_chat_members])
    await message.reply(f"<b>üëã –ü—Ä–∏–≤–µ—Ç, {members}</b>\n\n<a href='https://t.me/'> üìÇ –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –º–∞–Ω—É–∞–ª–∞–º–∏</a>\n\n<a href='https://t.me/+hGkvR4e57Y1kNmQ6'> üí∏ –í—Å—Ç—É–ø–∏ –≤ –∫–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç</a>\n\n<b><u>‚ùóÔ∏è–û—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–º–æ—Ç—Ä–∏ –≤ –∑–∞–∫—Ä–µ–ø–µ.</u></b>", parse_mode='HTML', reply_markup=p)

@dp.callback_query_handler(text="rules_project")
async def rules_projects(call: types.CallbackQuery):
    with sqlite3.connect(bd) as c:
        info = c.execute(f'SELECT * FROM workers WHERE id = {call.from_user.id}').fetchone()
    if info[10] == 0:
        await call.message.edit_text(f'''
    üí¨ –ü—Ä–∞–≤–∏–ª–∞ BOMB TEAM üí¨
    
<b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>
    
<code>üî∏ –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, 18+ GIF/–°—Ç–∏–∫–µ—Ä–æ–≤/–í–∏–¥–µ–æ/–§–æ—Ç–æ</code>
<code>üî∏ –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ</code>
<code>üî∏ –ü—Ä–∏–Ω–∏–º–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å–≤–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</code>
<code>üî∏ –°–ø–∞–º–∏—Ç—å –∏–ª–∏ —Ç–µ–≥–∞—Ç—å —Å—Ç–∞—Ñ—Ñ, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤–∞–º –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –≤ –ª—Å</code>
<code>üî∏ –û—Å–∫–æ—Ä–±–ª—è—Ç—å –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å/–≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ–ª–∏—Ç –≤–∑–≥–ª—è–¥—ã</code>
<code>üî∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ –¢–ü –∫—Ä–æ–º–µ –±–æ—Ç–æ–≤ —Ç–∏–º—ã</code>
<code>üî∏ –û—Å–∫–æ—Ä–±–ª—è—Ç—å –ª—é–±–æ–≥–æ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</code>
    
<b>–í—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ ‚úÖ</b>''', parse_mode='HTML')
    else:
        pass



@dp.callback_query_handler()
async def check_button(call: types.CallbackQuery):
    if call.data == 'rulees':
        
        await call.message.edit_text("–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ?", reply_markup=invite_markup)

    elif Invite_Button.check_button(call.data):
        inv[call.message.chat.id] = {
            "from": call.data
            }
        
        set_work[call.message.chat.id] = []

        await call.message.edit_text("–ù–∞ –∫–∞–∫–æ–º —Å–µ—Ä–≤–∏—Å–µ —É –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?", reply_markup=Markup_service.service(user=set_work.get(call.message.chat.id)))

    elif Service_button_click.check_button_service(call.data):
        sp = set_work.get(call.message.chat.id)
        if call.data in sp:
            sp.remove(call.data)
        else:
            sp.append(call.data)

        set_work[call.message.chat.id] = sp

        await call.message.edit_reply_markup(reply_markup=Markup_service.service(user=set_work.get(call.message.chat.id)))

    elif call.data == "cancel":
        print(set_work.get(call.message.chat.id))
        dd = inv.get(call.message.chat.id)
        dd["work"] = set_work.get(call.message.chat.id)
        inv[call.message.chat.id] = dd
        await call.message.edit_text("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?", reply_markup=hours)

    elif "hours" in call.data:
        dd = inv.get(call.message.chat.id)
        dd["time"] = call.data.split(" ")[0]
        inv[call.message.chat.id] = dd
        await call.message.edit_text(f"""‚úâÔ∏è –í–∞—à–∞ –ó–∞—è–≤–∫–∞
                                     
–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: {inv.get(call.message.chat.id).get('from')}

–û–ø—ã—Ç:

{Msg.generate_msg(inv.get(call.message.chat.id).get('work'))}
–í—Ä–µ–º—è: {inv.get(call.message.chat.id).get('time')}""",
    
    reply_markup=send)
        
    elif call.data == "send":
        await call.message.delete()
        username = call.message.from_user.username
        if call.message.from_user.username:
            username1 = f'@{call.message.from_user.username}'
        else:
            username1 = call.message.from_user.first_name

        try:
            ref = int(inv.get(call.message.chat.id).get('time'))
        except:
            ref = 0
        await bot.send_message(chat_id=6921452909, text=f"""–ü–æ—Å—Ç—É–ø–∏–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {username}
({call.message.chat.id})

–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: {inv.get(call.message.chat.id).get('from')}

–û–ø—ã—Ç:

{Msg.generate_msg(inv.get(call.message.chat.id).get('work'))}
–í—Ä–µ–º—è: {inv.get(call.message.chat.id).get('time')}""", reply_markup=menu.admin_pick(username1, call.message.from_user.id, ref))
        






if __name__ == '__main__':
    dp.middleware.setup(ThrottlingMiddleware())
    executor.start_polling(dp)
